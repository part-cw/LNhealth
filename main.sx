
`( 

  ;; Change empty string to false
  (getnotemptystring ,(lambda (field)
                        (let ((val (dbget field "")))
                          (if (fx> (string-length val) 0) val #f))))
  
  ;; Float to string which replaces -. with -0.
  (float->stringz ,(lambda (num i)
                     (let* ((str (float->string num i))
                            (f (string-ref str 0)))
                       (cond
                         ((char=? f #\-) (string-replace-substring str "-." "-0."))
                         ((or (char=? f #\+) (string=? str "0")) str)
                         (else (string-append "+" str))))))
  
  ;; Calculate a z-score
  (z-score ,(lambda (age weight boy?)
              (let* ((data (uiget (if boy? 'zboys 'zgirls)))
                     (months (fix (round (* age 12))))
                     (row (list-ref data months))
                     (l (car row))
                     (m (cadr row))
                     (s (caddr row)))
                (/ (- (expt (/ weight m) l) 1) (* l s)))))
  
  ;; Save the child data
  (save-child ,(lambda ()
                 (let* ((childid (dbget 'childid "dummy"))
                        (filename (string-append childid ".db"))
                        (db (uiget  'database))
                        (admindb (uiget  'admin-database))
                        (oldregister (table-ref admindb 'register '())))
                   (if (not (member childid oldregister))
                     (begin
                       (table-set! admindb 'register (append oldregister (list childid)))
                       (dbsave (uiget 'adminpath) (uiget 'cryptokey) admindb)))
                   (dbsave filename (uiget 'cryptokey) db))))
  
  ;; Calculate risk scores
  (calc-hospital-score ,(lambda ()
                          (let ((waz (dbget 'zscore #f))
                                (bcs (dbget 'comascore #f))
                                (hiv (dbget 'hiv #f))
                                (score 0.0))
                            (if waz
                              (if (and hiv (not (string=? hiv "Unknown")))
                                ;; Use first formula: logit[Pr(In-patient mortality)]=-4.280-0.254*WAZ+2.509*(BCS<5)+1.320*(HIV+).
                                (begin
                                  ;; Calculate formula
                                  (set! score (- (- 4.28) (* waz 0.254)))
                                  (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 2.509)))
                                  (if (string=? hiv "Positive") (set! score (+ score 1.32))))
                                ;; Use third formula: logit[Pr(In-patient mortality)]=-4.197 -0.303*WAZ+2.429*(BCS<5)
                                (begin
                                  ;; Calculate formula
                                  (set! score (- (- 4.197) (* waz 0.303)))
                                  (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 2.429)))))
                              ;; No WAZ, use MUAC instead
                              (let* ((muac (sxrun 'getnotemptystring 'muac))
                                     (mnum (string->number muac)))
                                (if (and hiv (not (string=? hiv "Unknown")))
                                  ;; Use second formula: logit[Pr(In-patient mortality)]=-0.5233 -0.0245*muac+2.5403*(BCS<5)+ 1.3333*(HIV+)
                                  (begin
                                    ;; Calculate formula
                                    (set! score (- (- 0.5233) (* mnum 0.0245)))
                                    (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 2.5403)))
                                    (if (string=? hiv "Positive") (set! score (+ score 1.3333))))
                                  ;; Use fourth formula: logit[Pr(In-patient mortality)]=0.3032 -0.0294*muac+2.4668*(BCS<5)
                                  (begin
                                    ;; Calculate formula
                                    (set! score (- 0.3032 (* mnum 0.0294)))
                                    (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 2.4668)))))))
                                  
                            ;; Now compute logit(p) = score (s) for p, by the formula: p = 1/(1 + e^-s) and then make into a percentage
                            (set! score (* (/ 1 (+ 1 (exp (- score)))) 100))

                            ;; Floor to two decimal places
                            (ffloor score 0.01))))
  
  (calc-discharge-score ,(lambda ()
                          (let* ((muac (sxrun 'getnotemptystring 'muac))
                                 (sp0 (sxrun 'getnotemptystring 'spo2med))
                                 (sp (if sp0 sp0 (sxrun 'getnotemptystring 'spo2manual)))
                                 (hospopts (uiget 'hosp_options '()))
                                 (hosp (dbget 'lasthosp #f))
                                 (hospnum (+ (list-pos hospopts hosp) 1))
                                 (bcs (dbget 'comascore #f))
                                 (hiv (dbget 'hiv #f))
                                 (score 0.0))
                            (if sp
                              (let ((spnum (string->number sp)))
                                (if muac
                                  (let ((mnum (string->number muac)))
                                    (if (and hiv (not (string=? hiv "Unknown")))
                                      ;; Use first formula: logit[Pr(In-patient mortality)]= 7.8497 +(-0.0471*muac) -0.0407(SpO2) - 0.281(Time since last hospitalization) + 0.9827(HIV+) + 0.8774(BCS<5)
                                      (begin
                                        (set! score (- 7.8497 (* mnum 0.0471)))
                                        (set! score (- score (* spnum 0.0407)))
                                        (set! score (- score (* hospnum 0.281)))
                                        (if (string=? hiv "Positive") (set! score (+ score 0.9827)))
                                        (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 0.8774))))
                                  
                                      ;; Use fourth formula: logit[Pr(In-patient mortality)]= 8.3221 - 0.0495(muac) - 0.0412(SpO2) + 0.8224(BCS<5) - 0.2841*(Time since last hospitalization)
                                      (begin
                                        (set! score (- 8.3221 (* mnum 0.0495)))
                                        (set! score (- score (* spnum 0.0412)))
                                        (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 0.8224)))
                                        (set! score (- score (* hospnum 0.2841))))))
                                  ;; Use third formula: logit[Pr(In-patient mortality)]= 2.2858 - 0.0454(SpO2) - 0.3179(Time) +1.1533(HIV+) + 0.9247(BCS<5) - 0.3016(WAZ) - 0.0336(Age in months)
                                  (let ((waz (dbget 'zscore #f))
                                        (age (dbget 'age #f)))
                                    (set! score (- 2.2858 (* spnum 0.0454)))
                                    (set! score (- score (* hospnum 0.3179)))
                                    (if (string=? hiv "Positive") (set! score (+ score 1.1533)))
                                    (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 0.9247)))
                                    (set! score (- score (* waz 0.3016)))
                                    (set! score (- score (* age 12 0.0336))))))
                              ;; Use second formula: logit[Pr(In-patient mortality)]= 4.529 + (-0.0506*muac) + 1.0549*(BCS<5) - 0.2593*(Time since last hospitalization) + 1.1143*(HIV+)
                              (let ((mnum (string->number muac)))
                                (set! score (- 4.529 (* mnum 0.0506)))
                                (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 1.0549)))
                                (set! score (- score (* hospnum 0.2593)))
                                (if (string=? hiv "Positive") (set! score (+ score 1.1143)))))
                            
                            ;; Now compute logit(p) = score (s) for p, by the formula: p = 1/(1 + e^-s) and then make into a percentage
                            (set! score (* (/ 1 (+ 1 (exp (- score)))) 100))

                            ;; Floor to two decimal places
                            (ffloor score 0.01))))
  
  ;; Use a list of thresholds to determine whether a factor is a little, moderate or high contribution to the risk
  (classify-factor ,(lambda (threshvar value str)
                      (let ((thresholds (uiget threshvar)))
                        (cond
                          ((or (not value) (<= value (cadr thresholds)))
                            (uiset 'highrisk (append (uiget 'highrisk) (list str))))
                          ((< value (cadddr thresholds))
                            (uiset 'moderaterisk (append (uiget 'moderaterisk) (list str))))
                          (else
                            (uiset 'littlerisk (append (uiget 'littlerisk) (list str))))))))
                           
  ;; Determine which category each risk factor is in and add it to the list
  (make-summary-items ,(lambda ()
                         (uiset 'littlerisk '())
                         (uiset 'moderaterisk '())
                         (uiset 'highrisk '())
                         
                         (let* ((hosp (dbget 'lasthosp #f))
                                (hospnum (if hosp (+ (list-pos (uiget 'hosp_options '()) hosp) 1) #f))
                                (hospstr (if hosp
                                           (string-append "Hospitalized " hosp)
                                           "Last hospitalization not answered")))
                           (sxrun 'classify-factor 'hosp_thresholds hospnum hospstr))
                         
                         (let* ((muac (sxrun 'getnotemptystring 'muac))
                                (muacnum (if muac (string->number muac) #f))
                                (muacstr (string-append "Mid-upper arm circumference: " (if muac (string-append muac " mm") "Missing"))))
                           (sxrun 'classify-factor 'muac_thresholds muacnum muacstr))
                                
                         (let* ((z (dbget 'zscore #f))
                                (zstr (string-append "Weight for age z-score: " (if z (sxrun 'float->stringz z 1) "Missing"))))
                           (sxrun 'classify-factor 'waz_thresholds z zstr))
                         
                         (let* ((sp0 (sxrun 'getnotemptystring 'spo2med))
                                (sp (if sp0 sp0 (sxrun 'getnotemptystring 'spo2manual)))
                                (spnum (if sp (string->number sp) #f))
                                (spstr (string-append "SpO2: " (if sp (string-append sp " %") "Missing"))))
                           (sxrun 'classify-factor 'spo2_thresholds spnum spstr))
                                
                         (let* ((bcs (dbget 'comascore #f))
                                (bscstr (string-append "Blantyre coma score: " (if bcs (number->string bcs) ""))))
                           (sxrun 'classify-factor 'bcs_thresholds bcs bscstr))
                           
                         (let* ((hiv (dbget 'hiv #f))
                                (hivnum (if (string=? hiv "Positive") 0 (if (string=? hiv "Negative") 1 #f)))
                                (hivstr (string-append "HIV status: " (if hiv hiv "Missing"))))
                           (sxrun 'classify-factor 'hiv_thresholds hivnum hivstr))))
  
  ;; Load an image file to use within a custom widget
  (load-image ,(lambda (file)
                 (let* ((sandbox (uiget 'sandbox #f))
                        (imgfile (string-append sandbox (system-pathseparator) file)))
                    (if (file-exists? imgfile)
                      (png->img imgfile)
                      #f))))
                       
  ;; background
  (background-color ,(color-rgb 61 169 134))
  (background-image "background.png")

  ;; initialization 
  (oncreate ,(lambda ()
      
    ;; Background box color
    (uiset 'boxcolor (color-rgb 20 140 102))

    ;; Header color
    (uiset 'color-header (color-rgb 20 140 102))
               
    ;; Default colour (for fields)
;;    (uiset 'color-default (color-rgb 137 199 180))
               
    ;; Button colour
    (uiset 'button-color (color-rgb 101 196 102))
        
    ;; Load fonts
    (uiset 'fnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansRegular.ttf") 18))
    (uiset 'smlfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansBold.ttf") 20))
    (uiset 'bigfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansBold.ttf") 40))
    (uiset 'hdfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansRegular.ttf") 25))
    (uiset 'btfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansBold.ttf") 20))
               
    ;; Load the localization csv table to translate between languages
    (local-load (string-append "sandbox" (system-pathseparator) "localization.csv"))
    
    ;; Setup rtaudio for pulse oximetry and setup SpO2 page
    (rtaudio-start 96000 1.0)
    (spo2spot-init 0 80 (glgui-width-get) (- (glgui-height-get) 80) store)
    (spo2-set-length 30)
               
    (if (string=? (system-platform) "android")
       (make-instance store "Oximeter" "oximeter" '("Port" "/dev/ttyUSB0")))
    (if (string=? (system-platform) "ios")
       (make-instance store "Oximeter" "oximeter" '("Port" "/dev/tty.iap")))
   (make-instance store "OximeterSQI" "oximetersqi"
     '("Waveform" "PLETHUNSCALED") '("Trends" ("HR" "SP"))
     '("MaxHRVar" 10.) '("MaxSpO2Var" 10.) '("TimeRange" 30.))

    (uiset 'origgui gui)
               
    (uiset 'adminpath (string-append "sandbox" (system-pathseparator) "admin.db"))
    (uiset 'cryptokey '#u8(134 102 230 27 13 87 122 120 138 103 53 192 70 93 200 53 121 202 33 85 28 187 73 219))
    (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
               
    ;; Make a list of the last 6 years
    (let loop ((d (string->number (seconds->string ##now "%Y"))) (i 0) (years '()))
      (if (fx< i 7)
        (loop (- d 1) (+ i 1) (append years (list (number->string d))))
        (uiset 'recent_years years)))
    ;; List of months
    (uiset 'months (list "January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December"))
               
    ;; Options for time since last hospitalization
    (uiset 'hosp_options (list "Less than 7 days ago" "7 to 30 days ago" "30 days to 1 year ago" "more than 1 year ago" "Never"))
               
    ;; Lists of options for Blantyre coma scale
    (uiset 'eye_options (list "Watches or follows" "Fails to watch or follow "))
    (uiset 'motor_options (list "Localizes painful stimulus" "Withdraws limb from\npainful stimulus" "No response or\ninappropriate response"))
    (uiset 'verbal_options (list "Cries appropriately with pain\n(or speaks if verbal)" "Moan or abnormal cry with pain" "No vocal response to pain"))
               
    ;; Load the z-score data
    (uiset 'zboys (map (lambda (entry) (map string->number (cdr entry))) (cdr (csv-read (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "zscore_boys.csv")))))
    (uiset 'zgirls (map (lambda (entry) (map string->number (cdr entry))) (cdr (csv-read (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "zscore_girls.csv")))))

    ;; Register background box widget
    (uiform-register 'box
      (lambda (x y w . args)
        ;; Box is indented from the side of the screen on the left and right
        ;; unless left and/or right are set to true and then it goes to
        ;; the edge of the screen on the given side
        (let* ((left (glgui:uiform-arg args 'left #f))
               (right (glgui:uiform-arg args 'right #f))
               (border (glgui:uiform-arg args 'border #f))
               (bx (+ x (if left (- 5) (* w 0.05))))
               (bw (+ (* w (+ 0.9 (if left 0.05 0.0) (if right 0.05 0.0))) (if left 5.0 0.0) (if right 5.0 0.0)))
               (by (+ y (glgui:uiform-arg args 'yofs 0)))
               (bh (glgui:uiform-arg args 'h 0)))
          (if border (glgui:draw-rounded-box (- bx 3) (- by 3) (+ bw 6) (+ bh 6) border))
          (glgui:draw-rounded-box bx by bw bh (uiget 'boxcolor))
          0))
      #f)
               
    ;; Scale thresholds - values mapped to left end, first quarter, middle, third quarter, and right end
    (uiset 'hosp_thresholds (list 1 2 3 4 5))
    (uiset 'muac_thresholds (list 115 120 125 135 145))
    (uiset 'waz_thresholds (list -3 -2 -1 0 2))
    (uiset 'spo2_thresholds (list 90 93 95 97 100))
    (uiset 'bcs_thresholds (list 3 4 4 4 5))
    (uiset 'hiv_thresholds (list 0 0 0 0 1))
    (uiset 'inhospital_thresholds (list -35.0 -4.2 -3.0 -2.1 -0.7))
    (uiset 'post_thresholds (list -35.0 -5.7 -3.5 -1.8 -0.4))

    ;; Load scale image and scale marker image
    (uiset 'scaleimage (sxrun 'load-image "scale.png"))
    (uiset 'happyimage (sxrun 'load-image "happy.png"))
    (uiset 'neutralimage (sxrun 'load-image "neutral.png"))
    (uiset 'sadimage (sxrun 'load-image "sad.png"))
    (uiset 'markimage (sxrun 'load-image "scalemark.png"))
    (uiset 'helpimage (sxrun 'load-image "help.png"))
               
    ;; Register scale widget
    (uiform-register 'scale
      (lambda (x y w . args)
        (let* ((img (uiget 'scaleimage))
               (happy (uiget 'happyimage))
               (sad (uiget 'sadimage))
               (m (uiget 'markimage))
               (thresholds (glgui:uiform-arg args 'thresholds #f))
               (v (glgui:uiform-arg args 'value #f)))
          (if (and img m x y w thresholds v)
            (let* ((h (cadr img))
                   (sw (car img))
                   (sw4 (/ (- sw 12) 4))
                   (sx (+ x (/ (- w sw) 2)))
                   (vx (cond
                         ((<= v (car thresholds)) sx)
                         ((<= v (cadr thresholds))
                            (let ((p1 (car thresholds))
                                  (p2 (cadr thresholds)))
                               (+ sx (* sw4 (/ (- v p1) (- p2 p1))))))
                         ((<= v (caddr thresholds))
                            (let ((p1 (cadr thresholds))
                                  (p2 (caddr thresholds)))
                               (+ sx sw4 (* sw4 (/ (- v p1) (- p2 p1))))))
                         ((<= v (cadddr thresholds))
                            (let ((p1 (caddr thresholds))
                                  (p2 (cadddr thresholds)))
                               (+ sx (* sw4 2) (* sw4 (/ (- v p1) (- p2 p1))))))
                         ((< v (list-ref thresholds 4))
                            (let ((p1 (cadddr thresholds))
                                  (p2 (list-ref thresholds 4)))
                               (+ sx (* sw4 3) (* sw4 (/ (- v p1) (- p2 p1))))))
                         (else (+ sx (- sw 10))))))
                  (glgui:draw-pixmap-center (- sx (car sad) 5) y (car sad) h sad White)
                  (glgui:draw-pixmap-center x y w h img White)
                  (glgui:draw-pixmap-center vx y 12 h m White)
                  (glgui:draw-pixmap-center (+ sx sw 5) y (car happy) h happy White)
                  h)
              0)))
      #f)

     ;; Register help button widget
     (uiform-register 'help
       (lambda (x y w . args)
         (let ((img (uiget 'helpimage)))
           (glgui:draw-pixmap-right (+ x (* w 0.075)) y (* w 0.85) (cadr img) img White)
           30))
       glgui:uiform-button-input)

     ;; Register face icon widget
     (uiform-register 'face
       (lambda (x y w . args)
         (let* ((state (glgui:uiform-arg args 'state 0))
                (img (uiget (cond
                               ((fx= state 0) 'sadimage)
                               ((fx= state 1) 'neutralimage)
                               ((fx= state 2) 'happyimage)))))
           (glgui:draw-pixmap-right x (- y 10) (- (* w 0.95) 6) (cadr img) img White)
           0))
       #f)
               
     ;; Keypad after char callback procedure to not allow spaces
     (uiset 'nospacecb (lambda (floc fid str)
                          (if (and (string? str) (fx> (string-length str) 0) (char=? (string-ref str (fx- (string-length str) 1)) #\space))
                            (xxset floc fid (substring str 0 (fx- (string-length str) 1))))))
  ))
  
  (onevent ,(lambda () (spo2spot-event)))
  
  (onscheduler ,(lambda () 
    (let* ((hr (stget  "HR" #f))
           (sp (stget  "SP" #f))
           (sqi (stget  "SQI" #f))
           (curpleth (stget  "PLETH" '()))
           (oldpleth (uiget  'pleth '()))
           (totallen (fx+ (length curpleth) (length oldpleth)))
           (newpleth (if (fx< totallen 300) (append oldpleth curpleth)
           (sublist (append oldpleth curpleth) (- totallen 300) totallen))))
       (uiset  'hr (if (number? hr) (fix hr) 0))
       (uiset  'sp (if (number? sp) (fix sp) 0))
       (uiset  'sqi (if (number? sqi) (fix sqi) 0))
       (uiset  'pleth newpleth)
       (if (and (stget "CaseID" #f) (uiget 'invalidspo2))
         (begin
           (uiset 'invalidspo2 #f)
           (stclear "SP_Median")))
      (spo2spot-scheduled)
    )))

  (onsuspend ,(lambda () #t))
  (onresume ,(lambda () #t))
  (ondestroy ,(lambda () #t))

;; LOGIN

 (main
  "PARA\nPAediatric Risk Assessment"
  #f
  #f
  (spacer height 20)
  (label size small text "In-hospital mortality + post-discharge")
  (label size small text "mortality prediction application")
  (spacer height 15)
  (label text "For children 6 months to 5 years old")
  (label text "admitted with a proven or suspected")
  (label text "infectious illness")
  (spacer height 45)
;;  (box yofs 36 h 172)
  (textentry text "Username:" id login_uname keycb ,(lambda () (uiget 'nospacecb)))
  (spacer height 15)
  (textentry text "Password:" id login_pw password #t keycb ,(lambda () (uiget 'nospacecb)))
  (spacer height 53)
  (box yofs 36 h 146)
  (button h 75 size header indent 0.05 rounded #t text "LOGIN" action
    ,(lambda () 
      (let* ((admin-uname  (dbget  'admin_uname))
             (admin-pwhash (dbget  'admin_pwhash))
             (login-pw     (dbget  'login_pw))
             (login-uname  (dbget  'login_uname))
             (admin-ok (and admin-uname login-uname login-pw
                 (string=? admin-uname login-uname)
                 (fx= admin-pwhash (string=?-hash login-pw))))
             (result (begin
               (dbclear 'childid)
               (dbclear 'first)
               (dbclear 'last)
               (dbclear  'login_uname)
               (dbclear  'login_pw)
               (if admin-ok 'menu
                 (if (and (dbget  'delete_uname) login-uname login-pw
                          (string=? (dbget  'delete_uname) login-uname)
                          (fx= (dbget  'delete_pwhash) (string=?-hash login-pw)))
                   'adminmenu
                   `(,"Invalid login" ("OK" #f)))))))
        (dbset  'delete_uname "admin")
        (dbset  'delete_pwhash (string=?-hash "lacey"))
        (dbsave (uiget 'adminpath) (uiget 'cryptokey) (uiget  'database))
        (uiset  'new #t)
        (uiset  'spo2_manual #f)
        (uiset  'admin (if admin-ok #t #f))
        result)))
  (spacer height 140)
;;  (box yofs 195 h 79)
  (label text "Pediatric Anesthesia Research Team")
  (spacer height 5)
  (label text "THE UNIVERSITY OF BRITISH COLUMBIA")
  (spacer)
;;  (box yofs 16 h 61)
 )

 ;; Menu for deleting all data
 (adminmenu
   "Admin Menu"
   ("Logout" ,(lambda () 'main))
   #f
   (spacer height 200)
   (button h 75 size header indent 0.05 rounded #t size header text "Delete All Data" action
      ,(lambda ()
        (list "Are you sure you wish to delete all records?" (list "Yes"
          (lambda ()
             ;; Clear the register
             (dbclear 'register)
             (dbsave (uiget 'adminpath) (uiget 'cryptokey) (uiget  'database))
             ;; Delete the files
             (let loop ((dirs (directory-files (system-directory))))
               (if (fx> (length dirs) 0)
                 (begin
                   (if (string-suffix-ci? ".db" (car dirs))
                     (delete-file (string-append (system-directory) (system-pathseparator) (car dirs))))
                   (loop (cdr dirs)))))
             'main))
          (list "No" 'adminmenu))))
 )
  
 ;; Main menu
 (menu
   "Start"
   ("Logout" ,(lambda () 'main))
   #f
   (spacer height 44)
   (image file "small_child.png")
   (spacer height 20)
   (button h 75 size header indent 0.05 rounded #t text "Add New Child" action ,(lambda () 'newchild))
   (spacer height 115)
   (image file "load.png")
   (spacer height 20)
;;   (box yofs 179 h 96)
   (button h 75 size header indent 0.05 rounded #t text "Load Child File" action ,(lambda () 'load))
   (spacer)
;;   (box yofs 10 h 96)
 )

 ;; New screen
 (newchild
   "New Child"
   ("Back" menu)
   ("Next" ,(lambda ()
              (let ((id (sxrun 'getnotemptystring 'childid))
                    (first (dbget 'first))
                    (last (dbget 'last)))
                (if id
                  (let ((db (uiget  'database))
                        (register (dbget 'register '())))
                    (if (member id register)
                      (list "ID already used." (list "OK" #f))
                      (begin
                          (dbclear 'childid)
                          (dbclear 'first)
                          (dbclear 'last)
                          (uiset  'admin-database db)
                          (uiset  'database (make-table))
                          (dbset  'childid id)
                          (if first (dbset  'first first))
                          (if last (dbset  'last last))
                          (uiset 'new #t)
                          ;; Set the current date
                          (dbset 'date (seconds->string ##now "%Y-%m-%d"))
                          (sxrun 'save-child)
                          'demog)))
                  (list "Enter an ID for the Child." (list "OK" #f))))))
   (spacer height 34)
   (label text "Please enter an ID for this child")
   (spacer height 10)
   (textentry id childid keypad numint)
   (spacer height 55)
   (box yofs 42 h 101)
   (textentry id first name #t text "Other Name:")
   (spacer height 20)
   (textentry id last name #t text "Surname:")
   (spacer)
   (box yofs 10 h 157)
   (spacer height 50)
   (image file "child.png")
 )
  
 ;; Load screen
 (load
   "Load"
   ("Back" menu)
   ("Next" ,(lambda ()
              (let ((sel (dbget 'editname #f)))
                (if sel
                  (let ((filename (string-append sel ".db")))
                    (if (file-exists? (string-append (system-directory) (system-pathseparator) filename))
                      (let ((db (uiget  'database)))
                        (uiset 'new #f)
                        (uiset  'admin-database db)
                        (uiset  'database (dbload filename (uiget 'cryptokey)))
                        ;; Populate SpO2 page with saved values
                        (let ((sp (sxrun 'getnotemptystring 'spo2med))
                              (hr (sxrun 'getnotemptystring 'hrmed))
                              (sptime (dbget 'sptime)))
                          (if (and sp hr)
                            (spo2spot-load hr sp sptime)))
                        'editchild)
                      (list (string-append "File " filename " missing.") (list "OK" #f))))
                  (list "Select a child by ID" (list "OK" #f))))))
   (spacer height 50)
   (label text "Records")
   (spacer height 10)
   ,(lambda ()
       (let ((register (dbget 'register '())))
          (if (= (length register) 0)
            '(label text "None")
            `(list id editname entries ,register))
       ))
   (spacer)
   (box yofs 10 h ,(lambda () (let ((register (dbget 'register '())))
                                (if (= (length register) 0) 86 (+ 60 (* 48 (length register)))))))
   (spacer height 10)
 )
  
 ;; Edit child name
 (editchild
   "Edit Child"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
              (dbclear 'childid)
              (dbclear 'first)
              (dbclear 'last)
              (spo2spot-reset)
              (stclear "SP_Median")
              (stclear "HR_Median")
              (stclear "SP_Timestamp")
              (if (uiget 'new #f) 'menu 'load)))
   ("Next" ,(lambda ()
              (sxrun 'save-child)
              'demog))
   (spacer height 53)
   (label size small text ,(lambda () (string-append "Child ID: " (dbget 'childid ""))))
   (spacer height 73)
;;   (box left #t yofs 62 h 43)
   (textentry id first name #t text "Other Name:")
   (spacer height 20)
   (textentry id last name #t text "Surname:")
   (spacer)
   (box yofs 10 h 157)
 )
  
 ;; Demographics screen
 (demog
   "Demographics"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              'editchild))
   ("Next" ,(lambda ()
              (sxrun 'save-child)
              (if (and (sane  'infection (lambda (str) #t) "Enter whether there is a suspected infection" "")
                       (sane  'lasthosp (lambda (str) #t) "Enter the time since last hospitalization" ""))
                ;; First question answered
                (let* ((sex (dbget 'sex #f))
                       (date (sxrun 'getnotemptystring 'date))
                       (age (dbget 'age #f)))
                   (if (and date (not (sanestring-dob date)))
                     ;; Invalid current date
                     (list "Invalid current date, enter as YYYY-MM-DD" (list "OK" #f))
                     (if (and sex date age)
                       ;; Everything filled in, go to next page
                       'anthro
                       (let ((message (cond
                                         ;; Missing sex and age
                                         ((and (not sex) (not age))
                                            (string-append "Missing sex and calculation of child's age. "
                                                           "MUAC will be used instead. The in-hospital mortality "
                                                           "risk will be less precise."))
                                         ((not sex)
                                            (string-append "Missing sex. "
                                                           "MUAC must be used instead. The in-hospital mortality "
                                                           "risk will be less precise."))
                                         ((not date)
                                            (string-append "Missing current date, cannot calculate child's age. "
                                                           "MUAC will be used instead. The in-hospital mortality "
                                                           "risk will be less precise."))
                                         ((not age)
                                            (if (and (dbget 'mob #f) (dbget 'yob #f))
                                              (string-append "Invalid child's birth date. "
                                                             "MUAC will be used instead. The in-hospital mortality "
                                                             "risk will be less precise.")
                                              (string-append "Missing child's birth date. "
                                                             "MUAC will be used instead. The in-hospital mortality "
                                                             "risk will be less precise."))))))
                         (list message (list "Continue" 'anthro) (list "Fix" #f))))))
                (list (uiget  'errmsg) (list "OK" #f)))))
   (spacer height 51)
   (label text "Suspected infection")
   (spacer height 5)
   (radiobox id infection left ("Yes" "1" #f) right ("No" "0" ("This app is only valid for children with a suspected infection: probabilities will not be calculated" ("OK" #f))))
   (spacer height 60)
   (box left #t yofs 50 h 95)
   (label text "Sex")
   (spacer height 5)
   (radiobox id sex left ("Male" "1" #f) right ("Female" "0" #f))
   (spacer height 60)
   (box right #t yofs 50 h 95)
   (label text "Birth Date")
   (spacer height 10)
   (dropdown text "Year of Birth" id yob entries ,(lambda () (uiget 'recent_years)))
   (spacer height 10)
   (dropdown text "Month of Birth" id mob entries ,(lambda () (uiget 'months)))
   (spacer height 10)
   (label size small align center text ,(lambda ()
                             (string-append "Calculated Age: "
                             ;; Calculate years between dob and current date
                             (let ((year (dbget 'yob #f))
                                   (month (dbget 'mob #f)))
                               (if (and year month)
                                 (let* ((months (uiget 'months))
                                        (monthnum (+ (list-pos months month) 1))
                                        (monthstr (string-append (if (fx< monthnum 10) "0" "") (number->string monthnum))) 
                                        (dob (string->seconds (string-append year monthstr "15") "%Y%m%d"))
                                        (current (with-exception-catcher (lambda (e) #f) (lambda () (string->seconds (dbget 'date) "%Y-%m-%d")))))
                                   (if current
                                     (let ((age (/ (- current dob) 31557600)))
                                       (if (< age 0.3)
                                         (begin
                                           (dbset 'age #f)
                                           "Invalid - Too Young")
                                         (begin
                                           (dbset 'age age)
                                           (string-append (float->string age 1) " years"))))
                                     (begin
                                       (dbset 'age #f)
                                       "Invalid - Fix Current Date")))
                                 (begin
                                   (dbset 'age #f)
                                   ""))))))
   (spacer height 65)
   (box left #t yofs 50 h ,(lambda ()
                             (let ((dh1 (if (uiget "yob:expanded") 336 0))
                                   (dh2 (if (uiget "mob:expanded") 576 0)))
                               (+ 193 dh1 dh2))))
   (label text "Last hospitalized...")
   (spacer height 10)
   (dropdown "Choose One" id lasthosp entries ,(lambda () (uiget 'hosp_options)))
   (spacer height 40)
   (box right #t yofs 25 h ,(lambda () (if (uiget "lasthosp:expanded") 340 105)))
 )
  
 ;; Anthropometric screen
 (anthro
   "Anthropometric Data"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              'demog))
   ("Next" ,(lambda ()
              (sxrun 'save-child)
              (let* ((z (dbget 'zscore #f))
                     (weight (sxrun 'getnotemptystring 'weight))
                     (muac (sxrun 'getnotemptystring 'muac))
                     (returnvalue #f)
                     (completeproc (lambda ()
                                      (if (and weight (not (sanestring-weight-kg weight)))
                                        ;; Invalid weight
                                        (list "Invalid weight. Please correct it" (list "OK" #f))
                                        (if (and (not z) (not muac))
                                          ;: No MUAC or WAZ, cannot continue
                                          (list (if (not weight)
                                                  "Please enter either weight or MUAC. Without these the risk scores cannot be calculated."
                                                  "Weight for age score cannot be calculated without age. Please enter MUAC.")
                                                (list "OK" #f))
                                          (if (and z muac)
                                            ;; All complete
                                            (begin
                                              (uiset 'origgui gui)
                                              (set! gui (list gui spo2spot:gui))
                                              'pulseox)
                                            ;; Missing one or the other
                                            (list
                                               (cond
                                                 ((not weight) "Missing weight. MUAC will be used instead. The in-hospital mortality risk will be less precise.")
                                                 ((not z) "Weight for age score cannot be calculated without age. MUAC will be used instead. The in-hospital mortality risk will be less precise.")
                                                 (else "Missing MUAC. Weight will be used instead. The post-discharge mortality risk will be less precise."))
                                               (list "Continue" (lambda ()
                                                                  (uiset 'origgui gui)
                                                                  (set! gui (list gui spo2spot:gui))
                                                                  'pulseox))
                                               (list "Fix" (if (and weight (not z)) 'demog #f)))))))))
                  ;; Check for out of range values
                  (if muac
                    (let ((muacn (string->number muac))
                          (proc2 completeproc))
                      (if (< muacn 50)
                        (set! returnvalue (list (string-append "MUAC is " muac " mm. A value below 55 mm is not valid.") (list "OK" #f)))
                        (if (or (< muacn 100) (> muacn 160))
                          (set! completeproc
                            (lambda ()
                              (list (string-append "MUAC outside acceptable range of\n100 - 160 mm. Are you sure MUAC is " muac " mm.") (list "Yes" proc2) (list "No" #f))))))))
                
                  (if (not returnvalue)
                    (if (and z (or (< z -4.0) (> z 3.0)))
                      (let ((gender (if (string=? (dbget 'sex) "1") "Male" "Female"))
                            (age (float->string (dbget 'age) 1)))
                        (set! returnvalue (list (string-append "The weight for age score is outside the acceptable range of -4 to +3. "
                                                               "Please confirm child is a " age " year old " gender " with weight " weight " kg.")
                                                (list "Yes" completeproc) (list "No" #f))))))
                 
                 ;; Return return value or run complete procedure
                 (if returnvalue returnvalue (completeproc)))))
                
   (spacer height 70)
   (textentry indent 0.7 text "Weight:" id weight keypad numfloat default "kg")
   (spacer height 85)
;;   (box left #t yofs 71 h 76)
   (textentry indent 0.7 text "Mid-upper arm circumference:" id muac keypad numint default "mm")
   (spacer height 184)
;;   (box right #t yofs 169 h 77)
   (label size small text "Calculated weight for age z-score")
   (spacer height 10)
   (label size big text ,(lambda () (let ((weight (dbget 'weight #f))
                                          (age (dbget 'age #f))
                                          (gender (dbget 'sex #f)))
                                      (if (and (string? weight) (fx> (string-length weight) 0) age gender)
                                        (let* ((w (string->number weight))
                                               (boy? (string=? gender "1"))
                                               (z (sxrun 'z-score age w boy?)))
                                          (dbset 'zscore z)
                                          (sxrun 'float->stringz z 1))
                                        (begin
                                          (dbset 'zscore #f)
                                          "")))))
   (spacer)
   (box yofs 16 h 100)
 )
 
  ;; Oxygen saturation from another device
  (spo2
   " Oxygen Saturation"
   ("Back" ,(lambda ()
              (uiset 'origgui gui)
              (set! gui (list gui spo2spot:gui))
              'pulseox))
   ("Next" ,(lambda ()
              (sxrun 'save-child)
              (uiset 'frompulseox #f)
              (let* ((sp0 (sxrun 'getnotemptystring 'spo2med))
                     (sp (if sp0 sp0 (sxrun 'getnotemptystring 'spo2manual)))
                     (muac (sxrun 'getnotemptystring 'muac)))
                (if sp
                  (if (> (string->number sp) 100)
                    (list (string-append "SpO2 is " sp ". SpO2 must be less than of equal to 100.") (list "OK" #f))
                    'clinical)
                  (if muac
                    (list "Missing SpO2. The post-discharge mortality will be less precise." (list "Continue" 'clinical)
                                                                                             (list "Fix" (lambda ()
                                                                                                            (uiset 'origgui gui)
                                                                                                            #f)))
                    (list "Please collect SpO2 or MUAC, without these the post-discharge mortality cannot be calculated." (list "OK" (lambda ()
                                                                                                                                        (uiset 'origgui gui)
                                                                                                                                        #f))))))))
   (spacer height 70)
   (textentry indent 0.7 text "SpO2 from another device:" id spo2manual keypad numint default "%")
   (spacer)
 )
   
  
  ;; Pulse oximeter spot check page
  (pulseox
   " Oxygen Saturation"
   ("Back" ,(lambda ()
              (if (uiget 'invalidspo2)
                (begin
                  (stclear "SP_Median")
                  (uiset 'invalidspo2 #f)))
              (if (stget "CaseID" #f)
                (begin
                  (set! gui (uiget 'origgui gui))
                  (list "Stop current SpO2 recording?" (list "Yes" (lambda ()
                                                                     (scheduler-endcase store)
                                                                     (spo2spot:progress-clear)
                                                                     (glgui-widget-set! spo2spot:gui spo2spot:start 'hidden #f)
                                                                     (uiset 'invalidspo2 #t)
                                                                     (sxrun 'save-child)
                                                                     'anthro))
                                                       (list "No" (lambda ()
                                                                    (set! gui (list gui spo2spot:gui))
                                                                    #f))))
                (let ((sp (stget "SP_Median" ""))
                      (hr (stget "HR_Median" ""))
                      (sptime (stget "SP_Timestamp" #f)))
                  (if (fx> (string-length sp) 0) (dbset 'spo2med sp))
                  (if (fx> (string-length hr) 0) (dbset 'hrmed hr))
                  (if sptime (dbset 'sptime sptime))
                  (set! gui (uiget 'origgui gui))
                  (sxrun 'save-child)
                  'anthro))))
   ("Next" ,(lambda ()
              (if (uiget 'invalidspo2)
                (begin
                  (stclear "SP_Median")
                  (uiset 'invalidspo2 #f)))
              (let ((exitproc (lambda ()
                                (sxrun 'save-child)
                                (uiset 'frompulseox #t)
                                       ;; SpO2 just recorded
                                (let* ((sp0 (stget "SP_Median" #f))
                                       ;; SpO2 possibly previous recorded
                                       (sp1 (if (string? sp0) sp0 (sxrun 'getnotemptystring 'spo2med)))
                                       ;; SpO2 possibly from a manual entry
                                       (sp (if (string? sp1) sp1 (sxrun 'getnotemptystring 'spo2manual)))
                                       (muac (sxrun 'getnotemptystring 'muac)))
                                  (if sp
                                    (begin
                                      (if (and sp0 (fx> (string-length sp0) 0))
                                        ;; Just recorded SpO2
                                        (let ((hr (stget "HR_Median" #f))
                                              (sptime (stget "SP_Timestamp" #f)))
                                          (dbset 'spo2med sp0)
                                          (if (fx> (string-length hr) 0) (dbset 'hrmed hr))
                                          (if sptime (dbset 'sptime sptime))))
                                      (set! gui (uiget 'origgui gui))
                                      'clinical)
                                    (begin
                                      (set! gui (uiget 'origgui gui))
                                      (if muac
                                        (list "Missing SpO2. The post-discharge mortality will be less precise." (list "Continue" 'clinical)
                                                                                                                 (list "Fix" (lambda ()
                                                                                                                                (uiset 'origgui gui)
                                                                                                                                (set! gui (list gui spo2spot:gui))
                                                                                                                                #f)))
                                        (list "Please collect SpO2 or MUAC, without these the post-discharge mortality cannot be calculated." (list "OK" (lambda ()
                                                                                                                                                            (uiset 'origgui gui)
                                                                                                                                                            (set! gui (list gui spo2spot:gui))
                                                                                                                                                            #f))))))))))
                (if (stget "CaseID" #f)
                  ;; In the middle of a recording, ask them if they wish to stop it
                  (begin
                    (set! gui (uiget 'origgui gui))
                    (list "Stop current SpO2 recording?" (list "Yes" (lambda ()
                                                                       (scheduler-endcase store)
                                                                       (spo2spot:progress-clear)
                                                                       (glgui-widget-set! spo2spot:gui spo2spot:start 'hidden #f)
                                                                       (uiset 'invalidspo2 #t)
                                                                       (exitproc)))
                                                         (list "No" (lambda ()
                                                                      (set! gui (list gui spo2spot:gui))
                                                                      #f))))
                  ;; Not in the middle of a recording, run exit procedure
                  (exitproc)))))
   (spacer height 600)
   ,(lambda ()
       (let ((id (stget "CaseID" #f)))
          (if (or id (sxrun 'getnotemptystring 'spo2med) (stget "SP_Median" #f))
            ;; If tablet based SpO2 being done or is already done, don't allow manual
            '(spacer height 0)
            `(button height 30 rounded #t indent 0.2 text "SpO2 from another device" action ,(lambda ()
                (if (uiget 'invalidspo2)
                  (begin
                     (stclear "SP_Median")
                     (uiset 'invalidspo2 #f)))
                (let ((sp (stget "SP_Median" #f)))
                  (if (number? sp) (dbset 'spo2med (number->string sp)))
                  (set! gui (uiget 'origgui gui))
                  (sxrun 'save-child)
                  'spo2))))))
 )
 
 ;; Clinical data screen
 (clinical
   "Clinical Data"
   ("Back" ,(lambda ()
              (if (uiget 'invalidspo2)
                (begin
                  (stclear "SP_Median")
                  (uiset 'invalidspo2 #f)))
              (sxrun 'save-child)
              (if (uiget 'frompulseox)
                (begin
                  (uiset 'origgui gui)
                  (set! gui (list gui spo2spot:gui))
                  'pulseox)
                'spo2)))
   ("Next" ,(lambda ()
              (if (uiget 'invalidspo2)
                (begin
                  (stclear "SP_Median")
                  (uiset 'invalidspo2 #f)))
              (sxrun 'save-child)
              (let ((bcs (dbget 'comascore #f))
                    (hiv (dbget 'hiv #f)))
                (if bcs
                  (if hiv
                    (begin
                      (sxrun 'make-summary-items)
                      'summary)
                    (let* ((sp0 (sxrun 'getnotemptystring 'spo2med))
                           (sp (if sp0 sp0 (sxrun 'getnotemptystring 'spo2manual)))
                           (muac (sxrun 'getnotemptystring 'muac)))
                      (cond
                        ((not muac) (list "Please collect HIV Status or MUAC, without these the post-discharge mortality cannot be calculated." (list "OK" #f)))
                        ((not sp) (list "Please collect HIV Status or SpO2, without these the post-discharge mortality cannot be calculated." (list "OK" #f)))
                        (else (list "Missing HIV Status. The risk scores will be less precise." (list "Continue" 'summary) (list "Fix" #f))))))
                  (list "Missing BCS. Without this score the risk scores cannot be calculated." (list "OK" #f))))))
   (spacer height 50)
   (label size small text "Blantyre coma scale")
   (spacer)
   (label align left text "Eye Movement")
   (spacer height 10)
   (dropdown id eye entries ,(lambda () (uiget 'eye_options)))
   (spacer)
   (label align left text "Best motor response")
   (spacer height 10)
   (dropdown id motor entries ,(lambda () (uiget 'motor_options)))
   (spacer)
   (label align left text "Best verbal response")
   (spacer height 10)
   (dropdown id verbal entries ,(lambda () (uiget 'verbal_options)))
   (spacer)
   (label size small text "Calculated Blantyre coma score")
   (spacer height 10)
   (label size big text ,(lambda () (let ((e (dbget 'eye #f))
                                          (eo (uiget 'eye_options #f))
                                          (m (dbget 'motor #f))
                                          (mo (uiget 'motor_options #f))
                                          (v (dbget 'verbal #f))
                                          (vo (uiget 'verbal_options #f)))
                                        (if (and e eo m mo v vo)
                                          ;; Add up questions to get scale value
                                          (let ((num (fx+ (- (length (member e eo)) 1)
                                                          (- (length (member m mo)) 1)
                                                          (- (length (member v vo)) 1))))
                                            (dbset 'comascore num)
                                            (number->string num))
                                          (begin
                                            (dbset 'comascore #f)
                                            "")))))
   (spacer height 56)
   (box left #t yofs 48 h ,(lambda () (+ 420
                                         (if (uiget "eye:expanded") 96 0)
                                         (if (uiget "motor:expanded") 144 0)
                                         (if (uiget "verbal:expanded") 144 0)
                                         (if (dbget 'comascore) 40 0))))
   (label align left text "HIV status")
   (spacer height 10)
   (dropdown id hiv entries ("Positive" "Negative" "Unknown"))
   (spacer)
   (box right #t yofs 16 h ,(lambda () (if (uiget "hiv:expanded") 245 101)))
 )
  
  ;; Summary screen
 (summary
   "Summary"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              'clinical))
   ("Next" ,(lambda ()
              (sxrun 'save-child)
              (if (string=? (dbget 'infection "0") "1")
                (let ((hscore (sxrun 'calc-hospital-score))
                      (dscore (sxrun 'calc-discharge-score)))
                  (dbset 'hospitalscore hscore)
                  (dbset 'dischargescore dscore)
                  'risk)
                ;; No infection, blinded, no probabilities
                'blinded)))
   (spacer height 10)
   (label indent 0.1 align left text ,(lambda ()
     (let* ((sex (dbget 'sex ""))
            (sexstr (cond
                      ((string=? sex "1") "Male")
                      ((string=? sex "0") "Female")
                      (else #f)))
            (a (dbget 'age #f))
            (w (dbget 'weight #f)))
     (string-append (if sexstr sexstr)
                    (if a (string-append (if sexstr ", " "") (float->string a 1) " years old") "")
                    (if w (string-append (if (or a sexstr) ", " "") w " kg") "")))))
   (spacer height 15)
   (label size small align center text "Risk Factors:")
   ,(lambda ()
      (if (fx= (length (uiget 'highrisk)) 0)
        '(spacer height 0)
        '(spacer height 45)))
   ,(lambda ()
      (if (fx= (length (uiget 'highrisk)) 0)
        '(spacer height 0)
        `(label size small align center text "High Contribution to Risk")))
   ,(lambda ()
      (if (fx= (length (uiget 'highrisk)) 0)
        '(spacer height 0)
        '(face state 0)))
   ,(lambda ()
      (if (fx= (length (uiget 'highrisk)) 0)
        '(spacer height 0)
        '(spacer height 15)))
   ,(lambda ()
      (let ((hr (uiget 'highrisk)))
        (if (fx> (length hr) 0)
          (let ((str (string-mapconcat hr "\n\n")))
            `(label align center text ,str))
          '(spacer height 0))))
   ,(lambda ()
      (if (fx= (length (uiget 'highrisk)) 0)
        '(spacer height 0)
        '(spacer height 20)))
   ,(lambda ()
      (let ((lhr (length (uiget 'highrisk))))
        (if (fx= lhr 0)
          '(spacer height 0)
          (let ((bh (+ 55 (* 36 lhr))))
            `(box yofs 0 h ,bh border ,Red)))))
   ,(lambda ()
      (if (fx= (length (uiget 'moderaterisk)) 0)
        '(spacer height 0)
        '(spacer height 45)))
   ,(lambda ()
      (if (fx= (length (uiget 'moderaterisk)) 0)
        '(spacer height 0)
        `(label size small align center text "Moderate Contribution to Risk")))
   ,(lambda ()
      (if (fx= (length (uiget 'highrisk)) 0)
        '(spacer height 0)
        '(face state 1)))
   ,(lambda ()
      (if (fx= (length (uiget 'moderaterisk)) 0)
        '(spacer height 0)
        '(spacer height 15)))
   ,(lambda ()
      (let ((mr (uiget 'moderaterisk)))
        (if (fx> (length mr) 0)
          (let ((str (string-mapconcat mr "\n\n")))
            `(label align center text ,str))
          '(spacer height 0))))
   ,(lambda ()
      (if (fx= (length (uiget 'moderaterisk)) 0)
        '(spacer height 0)
        '(spacer height 20)))
   ,(lambda ()
      (let ((lmr (length (uiget 'moderaterisk))))
        (if (fx= lmr 0)
          '(spacer height 0)
          (let ((bh (+ 55 (* 36 lmr))))
            `(box yofs 0 h ,bh border ,Orange)))))
   ,(lambda ()
      (if (fx= (length (uiget 'littlerisk)) 0)
        '(spacer height 0)
        '(spacer height 45)))
   ,(lambda ()
      (if (fx= (length (uiget 'littlerisk)) 0)
        '(spacer height 0)
        `(label size small align center text "Little Contribution to Risk")))
   ,(lambda ()
      (if (fx= (length (uiget 'highrisk)) 0)
        '(spacer height 0)
        '(face state 2)))
   ,(lambda ()
      (if (fx= (length (uiget 'littlerisk)) 0)
        '(spacer height 0)
        '(spacer height 15)))
   ,(lambda ()
      (let ((lr (uiget 'littlerisk)))
        (if (fx> (length lr) 0)
          (let ((str (string-mapconcat lr "\n\n")))
            `(label align center text ,str))
          '(spacer height 0))))
   ,(lambda ()
      (if (fx= (length (uiget 'littlerisk)) 0)
        '(spacer height 0)
        '(spacer height 20)))
   ,(lambda ()
      (let ((llr (length (uiget 'littlerisk))))
        (if (fx= llr 0)
          '(spacer height 0)
          (let ((bh (+ 55 (* 36 llr))))
            `(box yofs 0 h ,bh border ,Green)))))
   (spacer height 38)
   (button h 75 size header indent 0.05 rounded #t text "Calculate Mortality Risk" action
      ,(lambda ()
         (sxrun 'save-child)
         (if (string=? (dbget 'infection "0") "1")
           (let ((hscore (sxrun 'calc-hospital-score))
                 (dscore (sxrun 'calc-discharge-score)))
              (dbset 'hospitalscore hscore)
              (dbset 'dischargescore dscore)
              'risk)
           ;; No infection, blinded, no probabilities
           'blinded)))
 )
  
  ;; Risk screen
 (risk
   "Risk"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              'summary))
   ("Start Again" ,(lambda ()
                     (sxrun 'save-child)
                     (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
                     (dbclear 'childid)
                     (dbclear 'first)
                     (dbclear 'last)
                     (spo2spot-reset)
                     (stclear "SP_Median")
                     (stclear "HR_Median")
                     (stclear "SP_Timestamp")
                     'menu))
   (spacer height 77)
   (label size small text "In Hospital Risk of Mortality")
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                       (if score
                                         (if (<= score 3.0) "Low" "High")
                                         "Not Calculated"))))
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                       (if score
                                         (if (<= score 3.0) "< 1 %" "> 15 %")
                                         ""))))
   (spacer height 22)
   (help action help-in-hospital)
   (spacer height 92)
   (box yofs 78 h 240 border ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                           (if score
                                             (if (<= score 3.0) Green Red)
                                             #f))))
   (label size small text "Post-Discharge Risk of Mortality")
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 3.5) "Low" "High")
                                         "Not Calculated"))))
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 3.5) "< 1.5 %" "> 10 %")
                                         ""))))
   (spacer height 22)
   (help action help-post-discharge)
   (spacer height 80)
   (box yofs 65 h 240 border ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                           (if score
                                             (if (<= score 3.5) Green Red)
                                             #f))))
 )
 
  ;; Help page for in-hospital mortality
  (help-in-hospital
   "In-Hospital Risk"
   ("Back" risk)
   #f
   (spacer height 77)
   (label size small text "In Hospital Risk of Mortality")
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                       (if score
                                         (if (<= score 3.0) "Low" "High")
                                         "Not Calculated"))))
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                       (if score
                                         (if (<= score 3.0) "< 1 %" "> 15 %")
                                         ""))))
   (spacer)
   (scale thresholds ,(lambda () (uiget 'inhospital_thresholds)) value ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                                                                     (if score (- score) #f))))
   (spacer height 70)
   (label align left text ,(lambda () (string-append "Risk has been dichotomized into low and high based on a risk cut-off of approximately 3%. "
                                          "The percent shown represents the average risk of mortality in the population in which the model was derived, based on the cut-off.\n\n"
                                          "The risk bar represents the actual calculated risk, scaled to represent the 1st and 99th percentile of risk on the extreme sides, "
                                          "the risk cut-off (3%) at the middle, and the median population risk in the orange-yellow zone to the right of the middle.")))
   (spacer)
   (box yofs 9 h 553)
 )
  
  ;; Help page for post-discharge mortality
  (help-post-discharge
   "Post-Discharge Risk"
   ("Back" risk)
   #f
   (spacer height 64)
   (label align left text ,(lambda () (string-append "Risk has been dichotomized into low and high based on a risk cut-off of approximately 3.5%. "
                                          "The percent shown represents the average risk of mortality in the population in which the model was derived, based on the cut-off.\n\n"
                                          "The risk bar represents the actual calculated risk, scaled to represent the 1st and 99th percentile of risk on the extreme sides, "
                                          "the risk cut-off (3.5%) at the middle, and the median population risk in the orange-yellow zone to the right of the middle.")))
   (spacer height 70)
   (label size small text "Post-Discharge Risk of Mortality")
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 3.5) "Low" "High")
                                         "Not Calculated"))))
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 3.5) "< 1.5 %" "> 10 %")
                                         ""))))
   (spacer)
   (scale thresholds ,(lambda () (uiget 'post_thresholds)) value ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                                                                (if score (- score) #f))))
   (spacer height 35)
   (box h 595)
 )
  
 ;; Blinded risk screen
 (blinded
   "Risk"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              'summary))
   ("Start Again" ,(lambda ()
                     (sxrun 'save-child)
                     (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
                     (dbclear 'childid)
                     (dbclear 'first)
                     (dbclear 'last)
                     (spo2spot-reset)
                     (stclear "SP_Median")
                     (stclear "HR_Median")
                     (stclear "SP_Timestamp")
                     'menu))
   (spacer height 162)
   (label size small text "In Hospital Risk of Mortality")
   (spacer)
   (label text "No proven or suspected infection")
   (label text "so no probabilities calculated.")
   (spacer height 176)
   (box yofs 162 h 114)
   (label size small text "Post-Discharge Risk of Mortality")
   (spacer)
   (label text "No proven or suspected infection")
   (label text "so no probabilities calculated.")
   (spacer)
   (box yofs 16 h 114)
 )
)
  
;; eof
