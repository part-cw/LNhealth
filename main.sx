
`( 

  ;; Change empty string to false
  (getnotemptystring ,(lambda (field)
                        (let ((val (dbget field "")))
                          (if (fx> (string-length val) 0) val #f))))
  
  ;; Float to string which replaces -. with -0.
  (float->stringz ,(lambda (str i)
                     (string-replace-substring (float->string str i) "-." "-0.")))
  
  ;; Calculate a z-score
  (z-score ,(lambda (age weight boy?)
              (let* ((data (uiget (if boy? 'zboys 'zgirls)))
                     (months (fix (round (* age 12))))
                     (row (list-ref data months))
                     (l (car row))
                     (m (cadr row))
                     (s (caddr row)))
                (/ (- (expt (/ weight m) l) 1) (* l s)))))
  
  ;; Save the child data
  (save-child ,(lambda ()
                 (let* ((childid (dbget 'childid "dummy"))
                        (filename (string-append childid ".db"))
                        (db (uiget  'database))
                        (admindb (uiget  'admin-database))
                        (oldregister (table-ref admindb 'register '())))
                   (if (not (member childid oldregister))
                     (begin
                       (table-set! admindb 'register (append oldregister (list childid)))
                       (dbsave (uiget 'adminpath) (uiget 'cryptokey) admindb)))
                   (dbsave filename (uiget 'cryptokey) db))))
  
  ;; Calculate risk scores
  (calc-hospital-score ,(lambda ()
                          (let ((waz (dbget 'zscore #f))
                                (bcs (dbget 'comascore #f))
                                (hiv (dbget 'hiv #f))
                                (score 0.0))
                            (if waz
                              (if (and hiv (not (string=? hiv "Unknown")))
                                ;; Use first formula: logit[Pr(In-patient mortality)]=-4.280-0.254*WAZ+2.509*(BCS<5)+1.320*(HIV+).
                                (begin
                                  ;; Calculate formula
                                  (set! score (- (- 4.28) (* waz 0.254)))
                                  (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 2.509)))
                                  (if (string=? hiv "Positive") (set! score (+ score 1.32))))
                                ;; Use third formula: logit[Pr(In-patient mortality)]=-4.197 -0.303*WAZ+2.429*(BCS<5)
                                (begin
                                  ;; Calculate formula
                                  (set! score (- (- 4.197) (* waz 0.303)))
                                  (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 2.429)))))
                              ;; No WAZ, use MUAC instead
                              (let* ((muac (sxrun 'getnotemptystring 'muac))
                                     (mnum (string->number muac)))
                                (if (and hiv (not (string=? hiv "Unknown")))
                                  ;; Use second formula: logit[Pr(In-patient mortality)]=-0.5233 -0.0245*muac+2.5403*(BCS<5)+ 1.3333*(HIV+)
                                  (begin
                                    ;; Calculate formula
                                    (set! score (- (- 0.5233) (* mnum 0.0245)))
                                    (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 2.5403)))
                                    (if (string=? hiv "Positive") (set! score (+ score 1.3333))))
                                  ;; Use fourth formula: logit[Pr(In-patient mortality)]=0.3032 -0.0294*muac+2.4668*(BCS<5)
                                  (begin
                                    ;; Calculate formula
                                    (set! score (- 0.3032 (* mnum 0.0294)))
                                    (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 2.4668)))))))
                                  
                            ;; Now compute logit(p) = score (s) for p, by the formula: p = 1/(1 + e^-s) and then make into a percentage
                            (set! score (* (/ 1 (+ 1 (exp (- score)))) 100))

                            ;; Floor to two decimal places
                            (ffloor score 0.01))))
  
  (calc-discharge-score ,(lambda ()
                          (let* ((muac (sxrun 'getnotemptystring 'muac))
                                 (sp0 (sxrun 'getnotemptystring 'spo2med))
                                 (sp (if sp0 sp0 (sxrun 'getnotemptystring 'spo2manual)))
                                 (hospopts (uiget 'hosp_options '()))
                                 (hosp (dbget 'lasthosp #f))
                                 (hospnum (+ (list-pos hospopts hosp) 1))
                                 (bcs (dbget 'comascore #f))
                                 (hiv (dbget 'hiv #f))
                                 (score 0.0))
                            (if sp
                              (let ((spnum (string->number sp)))
                                (if muac
                                  (let ((mnum (string->number muac)))
                                    (if (and hiv (not (string=? hiv "Unknown")))
                                      ;; Use first formula: logit[Pr(In-patient mortality)]= 7.8497 +(-0.0471*muac) -0.0407(SpO2) - 0.281(Time since last hospitalization) + 0.9827(HIV+) + 0.8774(BCS<5)
                                      (begin
                                        (set! score (- 7.8497 (* mnum 0.0471)))
                                        (set! score (- score (* spnum 0.0407)))
                                        (set! score (- score (* hospnum 0.281)))
                                        (if (string=? hiv "Positive") (set! score (+ score 0.9827)))
                                        (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 0.8774))))
                                  
                                      ;; Use fourth formula: logit[Pr(In-patient mortality)]= 8.3221 - 0.0495(muac) - 0.0412(SpO2) + 0.8224(BCS<5) - 0.2841*(Time since last hospitalization)
                                      (begin
                                        (set! score (- 8.3221 (* mnum 0.0495)))
                                        (set! score (- score (* spnum 0.0412)))
                                        (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 0.8224)))
                                        (set! score (- score (* hospnum 0.2841))))))
                                  ;; Use third formula: logit[Pr(In-patient mortality)]= 2.2858 - 0.0454(SpO2) - 0.3179(Time) +1.1533(HIV+) + 0.9247(BCS<5) - 0.3016(WAZ) - 0.0336(Age in months)
                                  (let ((waz (dbget 'zscore #f))
                                        (age (dbget 'age #f)))
                                    (set! score (- 2.2858 (* spnum 0.0454)))
                                    (set! score (- score (* hospnum 0.3179)))
                                    (if (string=? hiv "Positive") (set! score (+ score 1.1533)))
                                    (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 0.9247)))
                                    (set! score (- score (* waz 0.3016)))
                                    (set! score (- score (* age 12 0.0336))))))
                              ;; Use second formula: logit[Pr(In-patient mortality)]= 4.529 + (-0.0506*muac) + 1.0549*(BCS<5) - 0.2593*(Time since last hospitalization) + 1.1143*(HIV+)
                              (let ((mnum (string->number muac)))
                                (set! score (- 4.529 (* mnum 0.0506)))
                                (if (and (number? bcs) (fx< bcs 5)) (set! score (+ score 1.0549)))
                                (set! score (- score (* hospnum 0.2593)))
                                (if (string=? hiv "Positive") (set! score (+ score 1.1143)))))
                            
                            ;; Now compute logit(p) = score (s) for p, by the formula: p = 1/(1 + e^-s) and then make into a percentage
                            (set! score (* (/ 1 (+ 1 (exp (- score)))) 100))

                            ;; Floor to two decimal places
                            (ffloor score 0.01))))
  
  ;; Load an image file to use within a custom widget
  (load-image ,(lambda (file)
                 (let* ((sandbox (uiget 'sandbox #f))
                        (imgfile (string-append sandbox (system-pathseparator) file)))
                    (if (file-exists? imgfile)
                      (png->img imgfile)
                      #f))))
                       
  ;; background
  (background-color ,(color-rgb 90 160 90))
  (background-image "background.png")

  ;; initialization 
  (oncreate ,(lambda ()
      
    ;; Background box color
    (uiset 'boxcolor (list (color-rgb 23 61 31) (color-rgb 23 61 31) (color-rgb 30 80 39) (color-rgb 30 80 39)))

    ;; Header color
    (uiset 'color-header (list (color-rgb 23 61 31) (color-rgb 23 61 31) (color-rgb 30 80 39) (color-rgb 30 80 39)))
               
    ;; Load fonts
    (uiset 'fnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansRegular.ttf") 18))
    (uiset 'smlfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansBold.ttf") 20))
    (uiset 'bigfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansBold.ttf") 40))
    (uiset 'hdfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansRegular.ttf") 25))
    (uiset 'btfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansBold.ttf") 20))
               
    ;; Load the localization csv table to translate between languages
    (local-load (string-append "sandbox" (system-pathseparator) "localization.csv"))
    
    ;; Setup rtaudio for pulse oximetry and setup SpO2 page
    (rtaudio-start 96000 1.0)
    (spo2spot-init 0 0 (glgui-width-get) (glgui-height-get) store)
               
    (if (string=? (system-platform) "android")
       (make-instance store "Oximeter" "oximeter" '("Port" "/dev/ttyUSB0")))
    (if (string=? (system-platform) "ios")
       (make-instance store "Oximeter" "oximeter" '("Port" "/dev/tty.iap")))
   (make-instance store "OximeterSQI" "oximetersqi"
     '("Waveform" "PLETHUNSCALED") '("Trends" ("HR" "SP"))
     '("MaxHRVar" 10.) '("MaxSpO2Var" 10.) '("TimeRange" 30.))

    (uiset 'origgui gui)
               
    (uiset 'adminpath (string-append "sandbox" (system-pathseparator) "admin.db"))
    (uiset 'cryptokey '#u8(134 102 230 27 13 87 122 120 138 103 53 192 70 93 200 53 121 202 33 85 28 187 73 219))
    (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
               
    ;; Make a list of the last 6 years
    (let loop ((d (string->number (seconds->string ##now "%Y"))) (i 0) (years '()))
      (if (fx< i 7)
        (loop (- d 1) (+ i 1) (append years (list (number->string d))))
        (uiset 'recent_years years)))
    ;; List of months
    (uiset 'months (list "January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December"))
               
    ;; Options for time since last hospitalization
    (uiset 'hosp_options (list "< 7 days" "7 - 30 days" "30 days - 1 year" "> 1 year" "Never hospitalized"))
               
    ;; Lists of options for Blantyre coma scale
    (uiset 'eye_options (list "Watches or follows" "Fails to watch or follow "))
    (uiset 'motor_options (list "Localizes painful stimulus" "Withdraws limb from\npainful stimulus" "No response or\ninappropriate response"))
    (uiset 'verbal_options (list "Cries appropriately with pain\n(or speaks if verbal)" "Moan or abnormal cry with pain" "No vocal response to pain"))
               
    ;; Load the z-score data
    (uiset 'zboys (map (lambda (entry) (map string->number (cdr entry))) (cdr (csv-read (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "zscore_boys.csv")))))
    (uiset 'zgirls (map (lambda (entry) (map string->number (cdr entry))) (cdr (csv-read (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "zscore_girls.csv")))))

    ;; Register background box widget
    (uiform-register 'box
      (lambda (x y w . args)
        ;; Box is indented from the side of the screen on the left and right
        ;; unless left and/or right are set to true and then it goes to
        ;; the edge of the screen on the given side
        (let* ((left (glgui:uiform-arg args 'left #f))
               (right (glgui:uiform-arg args 'right #f))
               (bx (+ x (if left (- 5) (* w 0.05))))
               (bw (+ (* w (+ 0.9 (if left 0.05 0.0) (if right 0.05 0.0))) (if left 5.0 0.0) (if right 5.0 0.0)))
               (by (+ y (glgui:uiform-arg args 'yofs 0)))
               (bh (glgui:uiform-arg args 'h 0)))
          (glgui:draw-rounded-box bx by bw bh (uiget 'boxcolor))
          0))
      #f)
               
    ;; Scale thresholds - values mapped to left end, first quarter, middle, third quarter, and right end
    (uiset 'hosp_thresholds (list 1 2 3 4 5))
    (uiset 'muac_thresholds (list 115 120 125 135 145))
    (uiset 'waz_thresholds (list -3 -2 -1 0 2))
    (uiset 'spo2_thresholds (list 90 93 95 97 100))
    (uiset 'bcs_thresholds (list 3 4 4 4 5))
    (uiset 'hiv_thresholds (list 0 0 0 0 1))
    (uiset 'inhospital_thresholds (list -35.0 -4.2 -3.0 -2.1 -0.7))
    (uiset 'post_thresholds (list -35.0 -5.7 -3.5 -1.8 -0.4))

    ;; Load scale image and scale marker image
    (uiset 'scaleimage (sxrun 'load-image "scale.png"))
    (uiset 'happyimage (sxrun 'load-image "happy.png"))
    (uiset 'sadimage (sxrun 'load-image "sad.png"))
    (uiset 'markimage (sxrun 'load-image "scalemark.png"))
    (uiset 'helpimage (sxrun 'load-image "help.png"))
               
    ;; Register scale widget
    (uiform-register 'scale
      (lambda (x y w . args)
        (let* ((img (uiget 'scaleimage))
               (happy (uiget 'happyimage))
               (sad (uiget 'sadimage))
               (m (uiget 'markimage))
               (thresholds (glgui:uiform-arg args 'thresholds #f))
               (v (glgui:uiform-arg args 'value #f)))
          (if (and img m x y w thresholds v)
            (let* ((h (cadr img))
                   (sw (car img))
                   (sw4 (/ (- sw 12) 4))
                   (sx (+ x (/ (- w sw) 2)))
                   (vx (cond
                         ((<= v (car thresholds)) sx)
                         ((<= v (cadr thresholds))
                            (let ((p1 (car thresholds))
                                  (p2 (cadr thresholds)))
                               (+ sx (* sw4 (/ (- v p1) (- p2 p1))))))
                         ((<= v (caddr thresholds))
                            (let ((p1 (cadr thresholds))
                                  (p2 (caddr thresholds)))
                               (+ sx sw4 (* sw4 (/ (- v p1) (- p2 p1))))))
                         ((<= v (cadddr thresholds))
                            (let ((p1 (caddr thresholds))
                                  (p2 (cadddr thresholds)))
                               (+ sx (* sw4 2) (* sw4 (/ (- v p1) (- p2 p1))))))
                         ((< v (list-ref thresholds 4))
                            (let ((p1 (cadddr thresholds))
                                  (p2 (list-ref thresholds 4)))
                               (+ sx (* sw4 3) (* sw4 (/ (- v p1) (- p2 p1))))))
                         (else (+ sx (- sw 10))))))
                  (glgui:draw-pixmap-center (- sx (car sad) 5) y (car sad) h sad White)
                  (glgui:draw-pixmap-center x y w h img White)
                  (glgui:draw-pixmap-center vx y 12 h m White)
                  (glgui:draw-pixmap-center (+ sx sw 5) y (car happy) h happy White)
                  h)
              0)))
      #f)

     ;; Register help button widget
     (uiform-register 'help
       (lambda (x y w . args)
         (let ((img (uiget 'helpimage)))
           (glgui:draw-pixmap-right (+ x (* w 0.075)) y (* w 0.85) (cadr img) img White)
           30))
       glgui:uiform-button-input)
  ))
  
  (onevent ,(lambda () (spo2spot-event)))
  
  (onscheduler ,(lambda () 
    (let* ((hr (stget  "HR" #f))
           (sp (stget  "SP" #f))
           (sqi (stget  "SQI" #f))
           (curpleth (stget  "PLETH" '()))
           (oldpleth (uiget  'pleth '()))
           (totallen (fx+ (length curpleth) (length oldpleth)))
           (newpleth (if (fx< totallen 300) (append oldpleth curpleth)
           (sublist (append oldpleth curpleth) (- totallen 300) totallen))))
       (uiset  'hr (if (number? hr) (fix hr) 0))
       (uiset  'sp (if (number? sp) (fix sp) 0))
       (uiset  'sqi (if (number? sqi) (fix sqi) 0))
       (uiset  'pleth newpleth)
      (spo2spot-scheduled)
    )))

  (onsuspend ,(lambda () #t))
  (onresume ,(lambda () #t))
  (ondestroy ,(lambda () #t))

;; LOGIN

 (main
  "PARA\nPAediatric Risk Assessment"
  #f
  #f
  (spacer height 10)
  (label size small text "In-hospital mortality and post-discharge")
  (label size small text "mortality prediction application")
  (spacer height 15)
  (label text "For children 6 months to 5 years old")
  (label text "admitted with a proven or suspected")
  (label text "infectious illness")
  (spacer height 42)
  (box yofs 36 h 172)
  (textentry text "Username:" id login_uname)
  (spacer height 10)
  (textentry text "Password:" id login_pw password #t)
  (spacer height 50)
  (box yofs 36 h 135)
  (button text "Login" action 
    ,(lambda () 
      (let* ((admin-uname  (dbget  'admin_uname))
             (admin-pwhash (dbget  'admin_pwhash))
             (login-pw     (dbget  'login_pw))
             (login-uname  (dbget  'login_uname))
             (admin-ok (and admin-uname login-uname login-pw 
                 (string=? admin-uname login-uname)
                 (fx= admin-pwhash (string=?-hash login-pw))))
             (result (begin
               (dbclear 'childid)
               (dbclear 'first)
               (dbclear 'last)
               (dbclear  'login_uname)
               (dbclear  'login_pw)
               (if admin-ok 'menu
                 `(,"Invalid login" ("OK" #f))))))
        (uiset  'new #t)
        (uiset  'spo2_manual #f)
        (uiset  'admin (if admin-ok #t #f))
        result)))
  (spacer height 209)
  (box yofs 195 h 79)
  (label text "Pediatric Anesthesia Research Team")
  (label text "The University of British Columbia")
  (spacer)
  (box yofs 16 h 61)
 )

 ;; Main menu
 (menu
   "Start"
   ("Logout" ,(lambda () 'main))
   #f
   (spacer height 179)
   (button size header text "New Child" action ,(lambda ()
                                      'newchild))
   (spacer height 199)
   (box yofs 179 h 96)
   (button size header text "Load Child File" action ,(lambda () 'load))
   (spacer)
   (box yofs 10 h 96)
 )

 ;; New screen
 (newchild
   "New Child"
   ("Back" menu)
   ("Next" ,(lambda ()
              (let ((id (sxrun 'getnotemptystring 'childid))
                    (first (sxrun 'getnotemptystring 'first))
                    (last (sxrun 'getnotemptystring 'last)))
                (if id
                  (let ((db (uiget  'database))
                        (register (dbget 'register '())))
                    (if (member id register)
                      (list "ID already used." (list "OK" #f))
                      (begin
                          (dbclear 'childid)
                          (dbclear 'first)
                          (dbclear 'last)
                          (uiset  'admin-database db)
                          (uiset  'database (make-table))
                          (dbset  'childid id)
                          (dbset  'first first)
                          (dbset  'last last)
                          (uiset 'new #t)
                          ;; Set the current date
                          (dbset 'date (seconds->string ##now "%Y-%m-%d"))
                          'demog)))
                  (list "Enter an ID for the Child." (list "OK" #f))))))
   (spacer height 34)
   (label text "Please enter an ID for this child")
   (spacer height 10)
   (textentry id childid keypad numint)
   (spacer height 55)
   (box left #t yofs 42 h 101)
   (textentry id first text "First Name:")
   (spacer height 20)
   (textentry id last text "Last Name:")
   (spacer)
   (box right #t yofs 10 h 157)
 )
  
 ;; Load screen
 (load
   "Load"
   ("Back" menu)
   ("Next" ,(lambda ()
              (let ((sel (dbget 'editname #f)))
                (if sel
                  (let ((filename (string-append sel ".db")))
                    (if (file-exists? (string-append (system-directory) (system-pathseparator) filename))
                      (let ((db (uiget  'database)))
                        (uiset 'new #f)
                        (uiset  'admin-database db)
                        (uiset  'database (dbload filename (uiget 'cryptokey)))
                        'editchild)
                      (list (string-append "File " filename " missing.") (list "OK" #f))))
                  (list "Select a child by ID" (list "OK" #f))))))
   (spacer height 50)
   (label text "Records")
   (spacer height 10)
   ,(lambda ()
       (let ((register (dbget 'register '())))
          (if (= (length register) 0)
            '(label text "None")
            `(list id editname entries ,register))
       ))
   (spacer)
   (box yofs 10 h ,(lambda () (let ((register (dbget 'register '())))
                                (if (= (length register) 0) 86 (+ 60 (* 48 (length register)))))))
   (spacer height 10)
 )
  
 ;; Edit child name
 (editchild
   "Edit Child"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
              (dbclear 'childid)
              (dbclear 'first)
              (dbclear 'last)
              (if (uiget 'new #f) 'menu 'load)))
   ("Next" ,(lambda ()
              (sxrun 'save-child)
              'demog))
   (spacer height 53)
   (label size small text ,(lambda () (string-append "Child ID: " (dbget 'childid ""))))
   (spacer height 73)
   (box left #t yofs 62 h 43)
   (textentry id first text "First Name:")
   (spacer height 20)
   (textentry id last text "Last Name:")
   (spacer)
   (box right #t yofs 10 h 157)
 )
  
 ;; Demographics screen
 (demog
   "Demographics"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              'editchild))
   ("Next" ,(lambda ()
              (sxrun 'save-child)
              (if (and (sane  'infection (lambda (str) #t) "Enter whether there is a suspected or proven infection" "")
                       (sane  'lasthosp (lambda (str) #t) "Enter the time since last hospitalization" ""))
                ;; First question answered
                (let* ((sex (dbget 'sex #f))
                       (date (sxrun 'getnotemptystring 'date))
                       (age (dbget 'age #f)))
                   (if (and date (not (sanestring-dob date)))
                     ;; Invalid current date
                     (list "Invalid current date, enter as YYYY-MM-DD" (list "OK" #f))
                     (if (and sex date age)
                       ;; Everything filled in, go to next page
                       'anthro
                       (let ((message (cond
                                         ;; Missing sex and age
                                         ((and (not sex) (not age))
                                            (string-append "Missing sex and calculation of child's age. "
                                                           "MUAC will be used instead. The in-hospital mortality "
                                                           "risk will be less precise."))
                                         ((not sex)
                                            (string-append "Missing sex. "
                                                           "MUAC must be used instead. The in-hospital mortality "
                                                           "risk will be less precise."))
                                         ((not date)
                                            (string-append "Missing current date, cannot calculate child's age. "
                                                           "MUAC will be used instead. The in-hospital mortality "
                                                           "risk will be less precise."))
                                         ((not age)
                                            (if (and (dbget 'mob #f) (dbget 'yob #f))
                                              (string-append "Invalid child's birth date. "
                                                             "MUAC will be used instead. The in-hospital mortality "
                                                             "risk will be less precise.")
                                              (string-append "Missing child's birth date. "
                                                             "MUAC will be used instead. The in-hospital mortality "
                                                             "risk will be less precise."))))))
                         (list message (list "Continue" 'anthro) (list "Fix" #f))))))
                (list (uiget  'errmsg) (list "OK" #f)))))
   (spacer height 51)
   (label text "Proven or suspected infection")
   (spacer height 5)
   (radiobox id infection left ("Yes" "1" #f) right ("No" "0" ("This app is only valid for children with a proven or suspected infection: probabilities will not be calculated" ("OK" #f))))
   (spacer height 60)
   (box left #t yofs 50 h 95)
   (label text "Sex")
   (spacer height 5)
   (radiobox id sex left ("Male" "1" #f) right ("Female" "0" #f))
   (spacer height 60)
   (box right #t yofs 50 h 95)
   (label text "Birth Date")
   (spacer height 10)
   (dropdown text "Year of Birth" id yob entries ,(lambda () (uiget 'recent_years)))
   (spacer height 10)
   (dropdown text "Month of Birth" id mob entries ,(lambda () (uiget 'months)))
   (spacer height 10)
   (label size small align center text ,(lambda ()
                             (string-append "Calculated Age: "
                             ;; Calculate years between dob and current date
                             (let ((year (dbget 'yob #f))
                                   (month (dbget 'mob #f)))
                               (if (and year month)
                                 (let* ((months (uiget 'months))
                                        (monthnum (+ (list-pos months month) 1))
                                        (monthstr (string-append (if (fx< monthnum 10) "0" "") (number->string monthnum))) 
                                        (dob (string->seconds (string-append year monthstr "15") "%Y%m%d"))
                                        (current (with-exception-catcher (lambda (e) #f) (lambda () (string->seconds (dbget 'date) "%Y-%m-%d")))))
                                   (if current
                                     (let ((age (/ (- current dob) 31557600)))
                                       (if (< age 0.3)
                                         (begin
                                           (dbset 'age #f)
                                           "Invalid - Too Young")
                                         (begin
                                           (dbset 'age age)
                                           (string-append (float->string age 1) " years"))))
                                     (begin
                                       (dbset 'age #f)
                                       "Invalid - Fix Current Date")))
                                 (begin
                                   (dbset 'age #f)
                                   ""))))))
   (spacer height 65)
   (box left #t yofs 50 h ,(lambda ()
                             (let ((dh1 (if (uiget "yob:expanded") 336 0))
                                   (dh2 (if (uiget "mob:expanded") 576 0)))
                               (+ 193 dh1 dh2))))
   (label text "Time since last hospitalization")
   (spacer height 10)
   (dropdown "Choose One" id lasthosp entries ,(lambda () (uiget 'hosp_options)))
   (spacer height 40)
   (box right #t yofs 25 h ,(lambda () (if (uiget "lasthosp:expanded") 340 105)))
 )
  
 ;; Anthropometric screen
 (anthro
   "Anthropometric Data"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              'demog))
   ("Next" ,(lambda ()
              (sxrun 'save-child)
              (let* ((z (dbget 'zscore #f))
                     (weight (sxrun 'getnotemptystring 'weight))
                     (muac (sxrun 'getnotemptystring 'muac))
                     (returnvalue #f)
                     (completeproc (lambda ()
                                      (if (and weight (not (sanestring-weight-kg weight)))
                                        ;; Invalid weight
                                        (list "Invalid weight. Please correct it" (list "OK" #f))
                                        (if (and (not z) (not muac))
                                          ;: No MUAC or WAZ, cannot continue
                                          (list (if (not weight)
                                                  "Please enter either weight or MUAC. Without these the risk scores cannot be calculated."
                                                  "Weight for age score cannot be calculated without age. Please enter MUAC.")
                                                (list "OK" #f))
                                          (if (and z muac)
                                            ;; All complete
                                            'spo2
                                            ;; Missing one or the other
                                            (list
                                               (cond
                                                 ((not weight) "Missing weight. MUAC will be used instead. The in-hospital mortality risk will be less precise.")
                                                 ((not z) "Weight for age score cannot be calculated without age. MUAC will be used instead. The in-hospital mortality risk will be less precise.")
                                                 (else "Missing MUAC. Weight will be used instead. The post-discharge mortality risk will be less precise."))
                                               (list "Continue" 'spo2)
                                               (list "Fix" (if (and weight (not z)) 'demog #f)))))))))
                  ;; Check for out of range values
                  (if muac
                    (let ((muacn (string->number muac))
                          (proc2 completeproc))
                      (if (< muacn 50)
                        (set! returnvalue (list (string-append "MUAC is " muac " mm. A value below 55 mm is not valid.") (list "OK" #f)))
                        (if (or (< muacn 100) (> muacn 160))
                          (set! completeproc
                            (lambda ()
                              (list (string-append "MUAC outside acceptable range of\n100 - 160 mm. Are you sure MUAC is " muac " mm.") (list "Yes" proc2) (list "No" #f))))))))
                
                  (if (not returnvalue)
                    (if (and z (or (< z -4.0) (> z 3.0)))
                      (let ((gender (if (string=? (dbget 'sex) "1") "Male" "Female"))
                            (age (float->string (dbget 'age) 1)))
                        (set! returnvalue (list (string-append "The weight for age score is outside the acceptable range of -4 to +3. "
                                                               "Please confirm child is a " age " year old " gender " with weight " weight " kg.")
                                                (list "Yes" completeproc) (list "No" #f))))))
                 
                 ;; Return return value or run complete procedure
                 (if returnvalue returnvalue (completeproc)))))
                
   (spacer height 70)
   (textentry indent 0.7 text "Weight:" id weight keypad numfloat default "kg")
   (spacer height 85)
   (box left #t yofs 71 h 76)
   (textentry indent 0.7 text "Mid-upper arm circumference:" id muac keypad numint default "mm")
   (spacer height 184)
   (box right #t yofs 169 h 77)
   (label size small text "Calculated weight for age z-score")
   (spacer height 10)
   (label size big text ,(lambda () (let ((weight (dbget 'weight #f))
                                          (age (dbget 'age #f))
                                          (gender (dbget 'sex #f)))
                                      (if (and (string? weight) (fx> (string-length weight) 0) age gender)
                                        (let* ((w (string->number weight))
                                               (boy? (string=? gender "1"))
                                               (z (sxrun 'z-score age w boy?)))
                                          (dbset 'zscore z)
                                          (sxrun 'float->stringz z 1))
                                        (begin
                                          (dbset 'zscore #f)
                                          "")))))
   (spacer)
   (box yofs 16 h 100)
 )
 
  ;; Oxygen saturation screen
  (spo2
   " Oxygen Saturation"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              'anthro))
   ("Next" ,(lambda ()
              (sxrun 'save-child)
              (uiset 'frompulseox #f)
              (let* ((sp0 (stget "SPMedian" #f))
                     (sp (if (number? sp0) (number->string sp0) (sxrun 'getnotemptystring 'spo2manual)))
                     (muac (sxrun 'getnotemptystring 'muac)))
                (if sp
                  (if (> (string->number sp) 100)
                    (list (string-append "SpO2 is " sp ". SpO2 must be less than of equal to 100.") (list "OK" #f))
                    'clinical)
                  (if muac
                    (list "Missing SpO2. The post-discharge mortality will be less precise." (list "Continue" 'clinical)
                                                                                             (list "Fix" (lambda ()
                                                                                                            (uiset 'origgui gui)
                                                                                                            #f)))
                    (list "Please collect SpO2 or MUAC, without these the post-discharge mortality cannot be calculated." (list "OK" (lambda ()
                                                                                                                                        (uiset 'origgui gui)
                                                                                                                                        #f))))))))
   (spacer)
   (button text "Tablet based SpO2" action ,(lambda ()
                                              (uiset 'origgui gui)
                                              (set! gui (list gui spo2spot:gui))
                                              'pulseox))
   (spacer height 10)
   (label text ,(lambda () (let ((sp (sxrun 'getnotemptystring 'spo2med)))
                             (if sp (string-append "Recorded " sp " %") ""))))
   (spacer height 120)
   (box left #t yofs ,(lambda () (if (sxrun 'getnotemptystring 'spo2med) 108 118))
                h ,(lambda () (if (sxrun 'getnotemptystring 'spo2med) 106 76)))
   ,(lambda ()
      (if (sxrun 'getnotemptystring 'spo2med)
        ;; If tablet based SpO2 done, don't allow entering manual SpO2
        `(spacer)
        `(textentry indent 0.7 text "SpO2 from another device:" id spo2manual keypad numint default "%")))
   (spacer)
   ,(lambda ()
      (if (sxrun 'getnotemptystring 'spo2med)
        `(spacer height 0)
        `(box right #t yofs 16 h 76)))
 )
   
  
  ;; Pulse oximeter spot check page
  (pulseox
   " Oxygen Saturation"
   ("Back" ,(lambda ()
              (if (stget "CaseID" #f)
                (begin
                  (set! gui (uiget 'origgui gui))
                  (list "Stop current SpO2 recording?" (list "Yes" (lambda ()
                                                                     (scheduler-endcase store)
                                                                     (spo2spot:progress-clear)
                                                                     (glgui-widget-set! spo2spot:gui spo2spot:start 'hidden #f)
                                                                     (sxrun 'save-child)
                                                                     'spo2))
                                                       (list "No" (lambda ()
                                                                    (set! gui (list gui spo2spot:gui))
                                                                    #f))))
                (begin
                  (set! gui (uiget 'origgui gui))
                  (sxrun 'save-child)
                  'spo2))))
   ("Next" ,(lambda ()
              (sxrun 'save-child)
              (uiset 'frompulseox #t)
              (let* ((sp0 (stget "SPMedian" #f))
                     (sp (if (number? sp0) (number->string sp0) (sxrun 'getnotemptystring 'spo2manual)))
                     (muac (sxrun 'getnotemptystring 'muac)))
                (if sp
                  (begin
                    (dbset 'spo2med sp)
                    (set! gui (uiget 'origgui gui))
                    'clinical)
                  (begin
                    (set! gui (uiget 'origgui gui))
                    (if muac
                      (list "Missing SpO2. The post-discharge mortality will be less precise." (list "Continue" 'clinical)
                                                                                               (list "Fix" (lambda ()
                                                                                                              (uiset 'origgui gui)
                                                                                                              (set! gui (list gui spo2spot:gui))
                                                                                                              #f)))
                      (list "Please collect SpO2 or MUAC, without these the post-discharge mortality cannot be calculated." (list "OK" (lambda ()
                                                                                                                                          (uiset 'origgui gui)
                                                                                                                                          (set! gui (list gui spo2spot:gui))
                                                                                                                                          #f)))))))))
   (spacer)
 )
 
 ;; Clinical data screen
 (clinical
   "Clinical Data"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              (if (uiget 'frompulseox)
                (begin
                  (uiset 'origgui gui)
                  (set! gui (list gui spo2spot:gui))
                  'pulseox)
                'spo2)))
   ("Next" ,(lambda ()
              (sxrun 'save-child)
              (let ((bcs (dbget 'comascore #f))
                    (hiv (dbget 'hiv #f)))
                (if bcs
                  (if hiv
                    'summary
                    (let* ((sp (sxrun 'getnotemptystring 'spo2med))
                           (muac (sxrun 'getnotemptystring 'muac)))
                      (cond
                        ((not muac) (list "Please collect HIV Status or MUAC, without these the post-discharge mortality cannot be calculated." (list "OK" #f)))
                        ((not sp) (list "Please collect HIV Status or SpO2, without these the post-discharge mortality cannot be calculated." (list "OK" #f)))
                        (else (list "Missing HIV Status. The risk scores will be less precise." (list "Continue" 'summary) (list "Fix" #f))))))
                  (list "Missing BCS. Without this score the risk scores cannot be calculated." (list "OK" #f))))))
   (spacer height 50)
   (label size small text "Blantyre coma scale")
   (spacer)
   (label align left text "Eye Movement")
   (spacer height 10)
   (dropdown id eye entries ,(lambda () (uiget 'eye_options)))
   (spacer)
   (label align left text "Best motor response")
   (spacer height 10)
   (dropdown id motor entries ,(lambda () (uiget 'motor_options)))
   (spacer)
   (label align left text "Best verbal response")
   (spacer height 10)
   (dropdown id verbal entries ,(lambda () (uiget 'verbal_options)))
   (spacer)
   (label size small text "Calculated Blantyre coma score")
   (spacer height 10)
   (label size big text ,(lambda () (let ((e (dbget 'eye #f))
                                          (eo (uiget 'eye_options #f))
                                          (m (dbget 'motor #f))
                                          (mo (uiget 'motor_options #f))
                                          (v (dbget 'verbal #f))
                                          (vo (uiget 'verbal_options #f)))
                                        (if (and e eo m mo v vo)
                                          ;; Add up questions to get scale value
                                          (let ((num (fx+ (- (length (member e eo)) 1)
                                                          (- (length (member m mo)) 1)
                                                          (- (length (member v vo)) 1))))
                                            (dbset 'comascore num)
                                            (number->string num))
                                          (begin
                                            (dbset 'comascore #f)
                                            "")))))
   (spacer height 56)
   (box left #t yofs 48 h ,(lambda () (+ 460
                                         (if (uiget "eye:expanded") 96 0)
                                         (if (uiget "motor:expanded") 144 0)
                                         (if (uiget "verbal:expanded") 144 0))))
   (label align left text "HIV status")
   (spacer height 10)
   (dropdown id hiv entries ("Positive" "Negative" "Unknown"))
   (spacer)
   (box right #t yofs 16 h ,(lambda () (if (uiget "hiv:expanded") 245 101)))
 )
  
  ;; Summary screen
 (summary
   "Summary"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              'clinical))
   ("Calculate" ,(lambda ()
              (sxrun 'save-child)
              (if (string=? (dbget 'infection "0") "1")
                (let ((hscore (sxrun 'calc-hospital-score))
                      (dscore (sxrun 'calc-discharge-score)))
                  (dbset 'hospitalscore hscore)
                  (dbset 'dischargescore dscore)
                  'risk)
                ;; No infection, blinded, no probabilities
                'blinded)))
   (spacer height 10)
   (label text ,(lambda ()
     (let* ((sex (dbget 'sex ""))
            (sexstr (cond
                      ((string=? sex "1") "Male")
                      ((string=? sex "0") "Female")
                      (else #f)))
            (a (dbget 'age #f))
            (w (dbget 'weight #f)))
     (string-append (if sexstr sexstr)
                    (if a (string-append (if sexstr ", " "") (float->string a 1) " years old") "")
                    (if w (string-append (if (or a sexstr) ", " "") w " kg") "")))))
   (spacer)
   (box yofs 25 h 46)
   (label size small align center text "Risk Factors:")
   (spacer height 15)
   (label text ,(lambda ()
                   (let ((hosp (dbget 'lasthosp #f)))
                      (if hosp
                        (if (string=? hosp "Never hospitalized")
                          hosp
                          (string-append "Hospitalized " hosp " ago"))
                        "Last hospitalization not answered"))))
   (spacer height 10)
   (scale thresholds ,(lambda () (uiget 'hosp_thresholds)) value ,(lambda () (let* ((hosp (dbget 'lasthosp #f))
                                                                                    (hospnum (if hosp (list-pos (uiget 'hosp_options '()) hosp) #f)))
                                                                               (if hospnum (+ hospnum 1) #f))))
   (spacer)
   (label text ,(lambda () (string-append "Mid-upper arm circumference: " (let ((m (sxrun 'getnotemptystring 'muac)))
                                                                                       (if m (string-append m " mm") "")))))
   (spacer height 10)
   (scale thresholds ,(lambda () (uiget 'muac_thresholds)) value ,(lambda () (let ((m (sxrun 'getnotemptystring 'muac)))
                                                                               (if m (string->number m) #f))))
   (spacer)
   (label text ,(lambda () (string-append "Weight for age z-score: " (let ((z (dbget 'zscore #f)))
                                                                                  (if z (sxrun 'float->stringz z 1) "")))))
   (spacer height 10)
   (scale thresholds ,(lambda () (uiget 'waz_thresholds)) value ,(lambda () (dbget 'zscore #f)))
   (spacer)
   (label text ,(lambda () (string-append "SpO2: " (let* ((sp0 (sxrun 'getnotemptystring 'spo2med))
                                                          (sp (if sp0 sp0 (sxrun 'getnotemptystring 'spo2manual))))
                                                      (if sp (string-append sp " %") "")))))
   (spacer height 10)
   (scale thresholds ,(lambda () (uiget 'spo2_thresholds)) value ,(lambda () (let* ((sp0 (sxrun 'getnotemptystring 'spo2med))
                                                                                    (sp (if sp0 sp0 (sxrun 'getnotemptystring 'spo2manual))))
                                                                                (if sp (string->number sp) #f))))
   (spacer)
   (label text ,(lambda () (string-append "Blantyre coma score: " (let ((b (dbget 'comascore #f)))
                                                                               (if b (number->string b) "")))))
   (spacer height 10)
   (scale thresholds ,(lambda () (uiget 'bcs_thresholds)) value ,(lambda () (dbget 'comascore #f)))
   (spacer)
   (label text ,(lambda () (string-append "HIV status: " (dbget 'hiv ""))))
   (spacer height 10)
   (scale thresholds ,(lambda () (uiget 'hiv_thresholds)) value ,(lambda () (let* ((hiv (dbget 'hiv #f)))
                                                                                (if (string=? hiv "Positive") 0 (if (string=? hiv "Negative") 1 #f)))))
   (box yofs -15 h 631)
 )
  
  ;; Risk screen
 (risk
   "Risk"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              'summary))
   ("Start Again" ,(lambda ()
                     (sxrun 'save-child)
                     (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
                     (dbclear 'childid)
                     (dbclear 'first)
                     (dbclear 'last)
                     'menu))
   (spacer height 45)
   (label size small text "In Hospital Risk of Mortality")
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                       (if score
                                         (if (<= score 3.0) "Low" "High")
                                         "Not Calculated"))))
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                       (if score
                                         (if (<= score 3.0) "< 1 %" "> 15 %")
                                         ""))))
   (spacer)
   (scale thresholds ,(lambda () (uiget 'inhospital_thresholds)) value ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                                                                     (if score (- score) #f))))
   (help action help-in-hospital)
   (spacer height 58)
   (box yofs 44 h 290)
   (label size small text "Post-Discharge Risk of Mortality")
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 3.5) "Low" "High")
                                         "Not Calculated"))))
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 3.5) "< 1.5 %" "> 10 %")
                                         ""))))
   (spacer)
   (scale thresholds ,(lambda () (uiget 'post_thresholds)) value ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                                                                (if score (- score) #f))))
   (help action help-post-discharge)
   (spacer)
   (box yofs 15 h 290)
 )
 
  ;; Help page for in-hospital mortality
  (help-in-hospital
   "Post-Discharge Risk"
   ("Back" risk)
   #f
   (spacer height 45)
   (label size small text "In Hospital Risk of Mortality")
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                       (if score
                                         (if (<= score 3.0) "Low" "High")
                                         "Not Calculated"))))
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                       (if score
                                         (if (<= score 3.0) "< 1 %" "> 15 %")
                                         ""))))
   (spacer)
   (scale thresholds ,(lambda () (uiget 'inhospital_thresholds)) value ,(lambda () (let ((score (dbget 'hospitalscore #f)))
                                                                                     (if score (- score) #f))))
   (spacer height 70)
   (label align left text ,(lambda () (string-append "Risk has been dichotomized into low and high based on a risk cut-off of approximately 3%. "
                                          "The percent shown represents the average risk of mortality in the population in which the model was derived, based on the cut-off.\n\n"
                                          "The risk bar represents the actual calculated risk, scaled to represent the 1st and 99th percentile of risk on the extreme sides, "
                                          "with the median population risk in the yellow zone.")))
   (spacer)
   (box yofs 10 h 516)
 )
  
  ;; Help page for post-discharge mortality
  (help-post-discharge
   "Post-Discharge Risk"
   ("Back" risk)
   #f
   (spacer height 98)
   (label align left text ,(lambda () (string-append "Risk has been dichotomized into low and high based on a risk cut-off of approximately 3.5%. "
                                          "The percent shown represents the average risk of mortality in the population in which the model was derived, based on the cut-off.\n\n"
                                          "The risk bar represents the actual calculated risk, scaled to represent the 1st and 99th percentile of risk on the extreme sides, "
                                          "with the median population risk in the yellow zone.")))
   (spacer height 70)
   (label size small text "Post-Discharge Risk of Mortality")
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 3.5) "Low" "High")
                                         "Not Calculated"))))
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 3.5) "< 1.5 %" "> 10 %")
                                         ""))))
   (spacer)
   (scale thresholds ,(lambda () (uiget 'post_thresholds)) value ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                                                                (if score (- score) #f))))
   (spacer height 45)
   (box h 565)
 )
  
 ;; Blinded risk screen
 (blinded
   "Risk"
   ("Back" ,(lambda ()
              (sxrun 'save-child)
              'summary))
   ("Start Again" ,(lambda ()
                     (sxrun 'save-child)
                     (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
                     (dbclear 'childid)
                     (dbclear 'first)
                     (dbclear 'last)
                     'menu))
   (spacer height 162)
   (label size small text "In Hospital Risk of Mortality")
   (spacer)
   (label text "No proven or suspected infection")
   (label text "so no probabilities calculated.")
   (spacer height 176)
   (box yofs 162 h 114)
   (label size small text "Post-Discharge Risk of Mortality")
   (spacer)
   (label text "No proven or suspected infection")
   (label text "so no probabilities calculated.")
   (spacer)
   (box yofs 16 h 114)
 )
)
  
;; eof
