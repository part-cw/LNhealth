
`( 

  (load-fieldmap ,(lambda (filename)
    (let ((file (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) filename)))
       (if (file-exists? file)
         (map (lambda (entry)
                  (append (list (string->symbol (car entry))) (map string-remove-quotes (cdr entry))))
              (csv-read file))
         #f))))

  ;; Change empty string to false
  (getnotemptystring ,(lambda (field)
                        (let ((val (dbget field "")))
                          (if (fx> (string-length val) 0) val #f))))
  
  ;; Float to string which replaces -. with -0.
  (float->stringz ,(lambda (num i)
                     (let* ((str (float->string num i))
                            (f (string-ref str 0)))
                       (cond
                         ((char=? f #\-) (string-replace-substring str "-." "-0."))
                         ((or (char=? f #\+) (string=? str "0")) str)
                         (else (string-append "+" str))))))
  
  ;; Check that a study ID is valid
  (valid-id ,(lambda (id)
    (let ((len (string-length id)))
      (let loop ((i 0) (letter? #t))
        (if (fx< i len)
          (let ((c (string-ref id i)))
            (cond
              ;; Valid ID letters
              ((and (fx< i 4) (char-alphabetic? c))
                (loop (+ i 1) #t))
              ;; Valid digit
              ((and (fx> i 2) (char-numeric? c))
                 (loop (+ i 1) #f))
              ;; Character invalid
              (else #f)))
          ;; All characters valid, make sure it ended in a digit
          (not letter?))))))

  ;; Calculate a z-score
  (z-score ,(lambda (age weight boy?)
              (let* ((data (uiget (if boy? 'zboys 'zgirls)))
                     (months (fix (round (* age 12))))
                     (row (list-ref data months))
                     (l (car row))
                     (m (cadr row))
                     (s (caddr row)))
                (/ (- (expt (/ weight m) l) 1) (* l s)))))
  
  ;; Format the age to X year(s), Y month(s)
  (format-age ,(lambda (age)
                 (let* ((agefl0 (fix age))
                        (agefl (if (> (- age agefl0) 0.958) (+ agefl0 1) agefl0))
                        (ageyears (number->string agefl))
                        (ageyearsstr (cond
                                       ((string=? ageyears "0") "")
                                       ((string=? ageyears "1") "1 year")
                                       (else (string-append ageyears " years"))))
                        (agemonths (number->string (fix (round (* (max (- age agefl) 0.) 12)))))
                        (agemonthsstr (cond
                                        ((string=? agemonths "0") "")
                                        ((string=? agemonths "1") "1 month")
                                        (else (string-append agemonths " months")))))
                    (string-append ageyearsstr
                                   (if (or (fx= (string-length agemonthsstr) 0)
                                           (fx= (string-length ageyearsstr) 0))
                                     ""
                                     ", ")
                                  agemonthsstr))))
  
  ;; Save the child data
  (save-child ,(lambda ()
                 (let* ((childid (dbget 'childid "dummy"))
                        (filename (string-append childid ".db"))
                        (db (uiget  'database))
                        (admindb (uiget  'admin-database))
                        (oldregister (table-ref admindb 'register '())))
                   (if (not (member childid oldregister))
                     (begin
                       (table-set! admindb 'register (append oldregister (list childid)))
                       (dbsave (uiget 'adminpath) (uiget 'cryptokey) admindb)))
                   (dbsave filename (uiget 'cryptokey) db))))
  
  ;; Mean and standard deviations to use to centre and scale variables
  (create-scale-table ,(lambda ()
                         (let ((tb (make-table init: #f)))
                           ;; Entries have mean and then SD
                           (table-set! tb "muac" (cons 140.4573055 16.75147685))
                           (table-set! tb "waz" (cons -1.175595455 1.733614018))
                           (table-set! tb "spo2" (cons 93.23795066 6.802892684))
                           (table-set! tb "lasthosp" (cons 3.972675522 1.239386626))
                           (table-set! tb "bcs" (cons 0.094497154 0.292574653))
                           (table-set! tb "hiv" (cons 0.037191651 0.189267078))
                           (table-set! tb "momhiv" (cons 0.121062619 0.326261947))
                           (table-set! tb "watersource" (cons 0.176470588 0.381292399))
                           (table-set! tb "waterpure" (cons 0.708918406 0.45434727))
                           (table-set! tb "bednet" (cons 2.533586338 0.752565243))
                           (table-set! tb "momedu" (cons 2.803795066 1.13171342))
                           (table-set! tb "traveldist" (cons 2.264895636 0.825997211))
                           (table-set! tb "temp2" (cons 1447.743492 98.20992618))
                           (uiset 'scaling tb))))

  (center-scale ,(lambda (fieldname val)
                   (let ((entry (table-ref (uiget 'scaling) fieldname)))
                     (if entry
                       (let ((mean (car entry))
                             (sd (cdr entry)))
                         (/ (- val mean) sd))
                       (begin
                         (log-error "Failed to find scaling for " fieldname)
                         val)))))

  ;; Calculate risk scores
  (calc-discharge-score ,(lambda ()
                          (let* ((muac (lnhealth-sxrun 'getnotemptystring 'muac))
                                 (muacnum (if muac (string->number muac) 0))
                                 (muact (lnhealth-sxrun 'center-scale "muac" muacnum))
                                 (waz (dbget 'zscore #f))
                                 (wazt (lnhealth-sxrun 'center-scale "waz" waz))
                                 (sp0 (lnhealth-sxrun 'getnotemptystring 'spo2med))
                                 (sp (if sp0 sp0 (lnhealth-sxrun 'getnotemptystring 'spo2manual)))
                                 (spnum (if sp (string->number sp) 0))
                                 (spt (lnhealth-sxrun 'center-scale "spo2" spnum))
                                 (hospopts (uiget 'hosp_options '()))
                                 (hosp (dbget 'lasthosp #f))
                                 (hospnum (+ (list-pos hospopts hosp) 1))
                                 (hospt (lnhealth-sxrun 'center-scale "lasthosp" hospnum))
                                 (bcs (dbget 'comascore #f))
                                 (bcst (lnhealth-sxrun 'center-scale "bcs" (if (and (number? bcs) (fx< bcs 5)) 1. 0.)))
                                 (hiv (dbget 'hiv #f))
                                 (hivt (lnhealth-sxrun 'center-scale "hiv" (if (and (string? hiv) (string=? hiv "Positive")) 1. 0.)))
                                 (momhiv (dbget 'momhiv #f))
                                 (momhivt (lnhealth-sxrun 'center-scale "momhiv" (if (and (string? momhiv) (string=? momhiv "Unknown")) 1. 0.)))
                                 (wateropts (uiget 'water_options '()))
                                 (water (dbget 'watersource #f))
                                 (waterind (+ (list-pos wateropts water) 1))
                                 (watert (lnhealth-sxrun 'center-scale "watersource" (if (fx= waterind 2) 1. 0.)))
                                 (pure (dbget 'waterpure #f))
                                 (purenum (if pure (string->number pure) 0))
                                 (puret (lnhealth-sxrun 'center-scale "waterpure" purenum))
                                 (netopts (uiget 'net_options '()))
                                 (bednet (dbget 'bednet #f))
                                 (netnum (+ (list-pos netopts bednet) 1))
                                 (nett (lnhealth-sxrun 'center-scale "bednet" netnum))
                                 (eduopts (uiget 'momedu_options '()))
                                 (momedu (dbget 'momedu #f))
                                 (momedunum (+ (list-pos eduopts momedu) 1))
                                 (momedut (lnhealth-sxrun 'center-scale "momedu" momedunum))
                                 (travelopts (uiget 'travel_options '()))
                                 (traveldist (dbget 'traveldist #f))
                                 (travelind (+ (list-pos travelopts traveldist) 1))
                                 ;; Group travel time responses
                                 (travelnum (if (fx> travelind 2)
                                              (if (fx> travelind 5) 4 3)
                                              travelind))
                                 (travelt (lnhealth-sxrun 'center-scale "traveldist" travelnum))
                                 (temp (lnhealth-sxrun 'getnotemptystring 'temp))
                                 (tempnum (if temp (string->number temp) 0))
                                 (temp2 (* tempnum tempnum))
                                 (temp2t (lnhealth-sxrun 'center-scale "temp2" temp2))
                                 (score -3.214063319))

                            ;; Currently assume all variable are available
                            ;; Add positive coefficients, subtract negative ones
                            (set! score (+ score (* bcst 0.128376701) (* hivt 0.153679396) (* travelt 0.134578194) (* momhivt 0.041557107) (* watert 0.170080257)))
                            (set! score (- score (* muact 0.252396925) (* wazt 0.225603341) (* spt 0.211672495) (* hospt 0.116558307) (* puret 0.019881807)
                                                 (* nett 0.014920737) (* momedut 0.032607766) (* temp2t 0.086806429)))

                            ;; Now compute logit(p) = score (s) for p, by the formula: p = 1/(1 + e^-s) and then make into a percentage
                            (set! score (* (/ 1 (+ 1 (exp (- score)))) 100))

                            ;; Floor to two decimal places
                            (ffloor score 0.01))))

  ;; Go to the printing page if everything is filled in
  (goto-printing ,(lambda ()
                    (let ((d1 (+ (current-time-seconds) 172800))
                          (d2 (+ (current-time-seconds) 604800))
                          (d3 (+ (current-time-seconds) 1209600)))
                       (dbset 'disnurse (uiget 'login_uname ""))
                       (dbset 'disdate (seconds->string ##now "%Y-%m-%d"))
                       (dbset 'ref1date (seconds->string d1 "%Y-%m-%d"))
                       (dbset 'ref1datef (seconds->string d1 "%A, %B %e, %Y"))
                       (dbset 'ref2date (seconds->string d2 "%Y-%m-%d"))
                       (dbset 'ref2datef (seconds->string d2 "%A, %B %e, %Y"))
                       (dbset 'ref3date (seconds->string d3 "%Y-%m-%d"))
                       (dbset 'ref3datef (seconds->string d3 "%A, %B %e, %Y")))
                    (lnhealth-sxrun 'save-child)
                    (let ((phone (lnhealth-sxrun 'getnotemptystring 'phone))
                          (phone2 (lnhealth-sxrun 'getnotemptystring 'phone2))
                          (facility (dbget 'facility)))
                      (if (and facility (string=? facility "Other"))
                        (set! facility (lnhealth-sxrun 'getnotemptystring 'custom_facility)))
                      (cond
                        ((and phone phone2 (not (string=? phone phone2)))
                          (list "Phone numbers do not match" (list "OK" #f)))
                        ((and phone phone2 (not (fx= (string-length phone) 10)))
                          (list "Phone number must be 10 digits starting with a 0." (list "OK" #f)))
                        ((and (dbget 'sms_consent) (or (not phone) (not phone2)))
                          (list "The phone number must be entered twice." (list "OK" #f)))
                        ((not facility)
                          (list "No referral facility chosen, please choose one." (list "OK" #f)))
                        (else
                          (lnhealth-sxrun 'save-child)
                          'printing)))))
  
  ;; Load an image file to use within a custom widget
  (load-image ,(lambda (file)
                 (let* ((sandbox (uiget 'sandbox #f))
                        (imgfile (string-append sandbox (system-pathseparator) file)))
                    (if (file-exists? imgfile)
                      (png->img imgfile)
                      #f))))
                       
  ;; background
  (background-color ,(color-rgb 61 169 134))
  (background-image "background.png")

  ;; initialization 
  (oncreate ,(lambda ()
      
    ;; Background box color
    (uiset 'boxcolor (color-rgb 20 140 102))

    ;; Header color
    (uiset 'color-header (color-rgb 20 140 102))
               
    ;; Default colour (for fields)
;;    (uiset 'color-default (color-rgb 137 199 180))
               
    ;; Button colour
    (uiset 'button-color (color-rgb 101 196 102))
        
    ;; Load fonts
    (uiset 'fnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansRegular.ttf") 20))
    (uiset 'smlfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansBold.ttf") 24))
    (uiset 'bigfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansBold.ttf") 40))
    (uiset 'hdfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansRegular.ttf") 30))
    (uiset 'btfnt (ttf->fnt (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "BalsamiqSansBold.ttf") 24))
               
    ;; Load the localization csv table to translate between languages, used by spo2spotcheck
    (local-load (string-append "sandbox" (system-pathseparator) "localization.csv"))
    
    ;; Setup pulse oximetry and setup SpO2 page
    (spo2spot-init 0 80 (glgui-width-get) (- (glgui-height-get) 80) lnhealth:store)
    (spo2-set-length 30)
    (spo2-set-quality-length 15)
               
    (if (string=? (system-platform) "android")
       (make-instance lnhealth:store "Oximeter" "oximeter" '("Port" "/dev/ttyUSB0")))
    (if (string=? (system-platform) "ios")
       (make-instance lnhealth:store "Oximeter" "oximeter" '("Port" "/dev/tty.iap")))
   (make-instance lnhealth:store "OximeterSQI" "oximetersqi"
     '("Waveform" "PLETHUNSCALED") '("Trends" ("HR" "SP"))
     '("MaxHRVar" 10.) '("MaxSpO2Var" 10.) '("TimeRange" 30.))

    (uiset 'origgui lnhealth:gui)
               
    (uiset 'adminpath (string-append "sandbox" (system-pathseparator) "admin.db"))
    (uiset 'cryptokey parasync-key)
    (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))

    ;; Load scaling table
    (lnhealth-sxrun 'create-scale-table)
               
    ;; Hospital sites
    (uiset 'sites (list "Mbarara Regional Referral Hospital" "Holy Innocents Children's Hospital" "Jinja Regional Referral Hospital" "Masaka Regional Referral Hospital"))

    ;; Make a list of the last 6 years
    (let loop ((d (string->number (seconds->string ##now "%Y"))) (i 0) (years '()))
      (if (fx< i 7)
        (loop (- d 1) (+ i 1) (append years (list (number->string d))))
        (uiset 'recent_years years)))
    ;; List of months
    (uiset 'months (list "January" "February" "March" "April" "May" "June" "July" "August" "September" "October" "November" "December"))
               
    ;; Options for time since last hospitalization
    (uiset 'hosp_options (list "Less than 7 DAYS ago" "7 to 30 DAYS ago" "30 DAYS to 1 YEAR ago" "more than 1 YEAR ago" "Never"))
               
    ;; Options for social questions
    (uiset 'water_options (list "Protected spring" "Bore hole" "Municipal water" "Open source (unprotected, stagnant water, dam)" "Slow running water" "Fast running water"))
    (uiset 'net_options (list "Never" "Sometimes" "Always"))
    (uiset 'momedu_options (list "No school" "<= P3" "P4-P7" "S1-S6" "Post secondary (including post S4 technical school)" "Don't know"))
    (uiset 'travel_options (list "< 30 minutes" "30 minutes - 1 hour" "1 - 2 hours" "2 - 3 hours" "3 - 4 hours" "4 - 8 hours" "> 8 hours"))

    ;; Lists of options for Blantyre coma scale
    (uiset 'eye_options (list "Watches or follows" "Fails to watch or follow"))
    (uiset 'motor_options (list "Localizes painful stimulus" "Withdraws limb from\npainful stimulus" "No response or\ninappropriate response"))
    (uiset 'verbal_options (list "Cries appropriately with pain\n(or speaks if verbal)" "Moan or abnormal cry with pain" "No vocal response to pain"))
               
    ;; Load the z-score data
    (uiset 'zboys (map (lambda (entry) (map string->number (cdr entry))) (cdr (csv-read (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "zscore_boys.csv")))))
    (uiset 'zgirls (map (lambda (entry) (map string->number (cdr entry))) (cdr (csv-read (string-append (system-directory) (system-pathseparator) "sandbox" (system-pathseparator) "zscore_girls.csv")))))

    (uiset 'progress 0.)
    (uiset 'pmessage "Please Wait")

    ;; Register background box widget
    (uiform-register 'box
      (lambda (x y w . args)
        ;; Box is indented from the side of the screen on the left and right
        ;; unless left and/or right are set to true and then it goes to
        ;; the edge of the screen on the given side
        (let* ((left (glgui:uiform-arg args 'left #f))
               (right (glgui:uiform-arg args 'right #f))
               (border (glgui:uiform-arg args 'border #f))
               (bx (+ x (if left (- 5) (* w 0.05))))
               (bw (+ (* w (+ 0.9 (if left 0.05 0.0) (if right 0.05 0.0))) (if left 5.0 0.0) (if right 5.0 0.0)))
               (by (+ y (glgui:uiform-arg args 'yofs 0)))
               (bh (glgui:uiform-arg args 'h 0)))
          (if border (glgui:draw-rounded-box (- bx 3) (- by 3) (+ bw 6) (+ bh 6) border))
          (glgui:draw-rounded-box bx by bw bh (uiget 'boxcolor))
          0))
      #f)
               
    ;; Scale thresholds - values mapped to left end, first quarter, middle, third quarter, and right end
    ;; High risk is <= second number (left quarter)
    ;; Moderate risk is > second number and < fourth number (middle half)
    ;; Low risk is >= fourth number (right quarter)
    (uiset 'hosp_thresholds (list 1 2 3 4 5))
    (uiset 'muac_thresholds (list 115 120 125 135 145))
    (uiset 'waz_thresholds (list -3 -2 -1 0 2))
    (uiset 'spo2_thresholds (list 90 93 95 97 100))
    (uiset 'bcs_thresholds (list 3 4 4 4 5))
    (uiset 'hiv_thresholds (list 0 0 0 0 1))
    (uiset 'inhospital_thresholds (list -35.0 -4.2 -3.0 -2.1 -0.7))
    (uiset 'post_thresholds (list -35.0 -5.7 -3.5 -1.8 -0.4))

    ;; Load scale image and scale marker image
    (uiset 'scaleimage (lnhealth-sxrun 'load-image "scale.png"))
    (uiset 'happyimage (lnhealth-sxrun 'load-image "happy.png"))
    (uiset 'neutralimage (lnhealth-sxrun 'load-image "neutral.png"))
    (uiset 'sadimage (lnhealth-sxrun 'load-image "sad.png"))
    (uiset 'markimage (lnhealth-sxrun 'load-image "scalemark.png"))
    (uiset 'helpimage (lnhealth-sxrun 'load-image "help.png"))
               
    ;; Register scale widget
    (uiform-register 'scale
      (lambda (x y w . args)
        (let* ((img (uiget 'scaleimage))
               (happy (uiget 'happyimage))
               (sad (uiget 'sadimage))
               (m (uiget 'markimage))
               (thresholds (glgui:uiform-arg args 'thresholds #f))
               (v (glgui:uiform-arg args 'value #f)))
          (if (and img m x y w thresholds v)
            (let* ((h (cadr img))
                   (sw (car img))
                   (sw4 (/ (- sw 12) 4))
                   (sx (+ x (/ (- w sw) 2)))
                   (vx (cond
                         ((<= v (car thresholds)) sx)
                         ((<= v (cadr thresholds))
                            (let ((p1 (car thresholds))
                                  (p2 (cadr thresholds)))
                               (+ sx (* sw4 (/ (- v p1) (- p2 p1))))))
                         ((<= v (caddr thresholds))
                            (let ((p1 (cadr thresholds))
                                  (p2 (caddr thresholds)))
                               (+ sx sw4 (* sw4 (/ (- v p1) (- p2 p1))))))
                         ((<= v (cadddr thresholds))
                            (let ((p1 (caddr thresholds))
                                  (p2 (cadddr thresholds)))
                               (+ sx (* sw4 2) (* sw4 (/ (- v p1) (- p2 p1))))))
                         ((< v (list-ref thresholds 4))
                            (let ((p1 (cadddr thresholds))
                                  (p2 (list-ref thresholds 4)))
                               (+ sx (* sw4 3) (* sw4 (/ (- v p1) (- p2 p1))))))
                         (else (+ sx (- sw 10))))))
                  (glgui:draw-pixmap-center (- sx (car sad) 5) y (car sad) h sad White)
                  (glgui:draw-pixmap-center x y w h img White)
                  (glgui:draw-pixmap-center vx y 12 h m White)
                  (glgui:draw-pixmap-center (+ sx sw 5) y (car happy) h happy White)
                  h)
              0)))
      #f)

     ;; Register help button widget
     (uiform-register 'help
       (lambda (x y w . args)
         (let ((img (uiget 'helpimage)))
           (glgui:draw-pixmap-right (+ x (* w 0.075)) y (* w 0.85) (cadr img) img White)
           30))
       glgui:uiform-button-input)

     ;; Register face icon widget
     (uiform-register 'face
       (lambda (x y w . args)
         (let* ((state (glgui:uiform-arg args 'state 0))
                (img (uiget (cond
                               ((fx= state 0) 'sadimage)
                               ((fx= state 1) 'neutralimage)
                               ((fx= state 2) 'happyimage)))))
           (glgui:draw-pixmap-right x (- y 10) (- (* w 0.95) 6) (cadr img) img White)
           0))
       #f)
               
     ;; Keypad after char callback procedure to not allow spaces
     (uiset 'nospacecb (lambda (floc fid str)
                          (if (and (string? str) (fx> (string-length str) 0) (char=? (string-ref str (fx- (string-length str) 1)) #\space))
                            (xxset floc fid (substring str 0 (fx- (string-length str) 1))))))

     ;; Keypad after char callback procedure for the study ID
     (uiset 'idcb (lambda (floc fid str)
                    (let ((len (string-length str)))
                      (let loop ((i 0) (newstr ""))
                        (if (fx< i len)
                          (let ((c (string-ref str i)))
                            (if (or (char-alphabetic? c)
                                    (char-numeric? c))
                              (loop (+ i 1) (string-append newstr (string c)))
                              (loop (+ i 1) newstr)))
                          (xxset floc fid (string-upcase newstr)))))))

     ;; Keypad after char callback procedure for the phone numbers, always have format 0XXXXXXXXX
     (uiset 'phonecb (lambda (floc fid str)
                       (if (string? str)
                         (let ((len (string-length str)))
                           ;; Add '0' to the start if not already there
                           (if (or (fx= len 0) (not (char=? (string-ref str 0) #\0)))
                             (begin
                               (set! len (+ len 1))
                               (set! str (string-append "0" str))))
                           ;; Reduce to 10 characters
                           (if (fx> len 10)
                             (set! str (substring str 0 10)))
                           (xxset floc fid str))
                         ;; If no value, set to 0
                         (xxset floc fid "0"))))

     ;; Load field maps for upload
     (uiset 'assessmentfieldmap (lnhealth-sxrun 'load-fieldmap "assessmentfieldmap.csv"))
     (uiset 'identfieldmap (lnhealth-sxrun 'load-fieldmap "identfieldmap.csv"))
  ))
  
  (onevent ,(lambda (t x y) (spo2spot-event)))
  
  (onscheduler ,(lambda () 
    (let* ((hr (stget  "HR" #f))
           (sp (stget  "SP" #f))
           (sqi (stget  "SQI" #f))
           (curpleth (stget  "PLETH" '()))
           (oldpleth (uiget  'pleth '()))
           (totallen (fx+ (length curpleth) (length oldpleth)))
           (newpleth (if (fx< totallen 300) (append oldpleth curpleth)
           (sublist (append oldpleth curpleth) (- totallen 300) totallen))))
       (uiset  'hr (if (number? hr) (fix hr) 0))
       (uiset  'sp (if (number? sp) (fix sp) 0))
       (uiset  'sqi (if (number? sqi) (fix sqi) 0))
       (uiset  'pleth newpleth)
       (if (and (stget "CaseID" #f) (uiget 'invalidspo2))
         (begin
           (uiset 'invalidspo2 #f)
           (stclear "SP_Median")))
      (spo2spot-scheduled)
    )))

  (onsuspend ,(lambda () #t))
  (onresume ,(lambda () #t))
  (ondestroy ,(lambda () #t))

;; LOGIN

 (main
  logo.png
  #f
  #f
  (spacer height 20)
  (label size small text "Post-discharge")
  (label size small text "mortality prediction application")
  (spacer height 15)
  (label text "For children 6 months to 5 years old")
  (label text "admitted with a proven or suspected")
  (label text "infectious illness")
  (spacer height 45)
;;  (box yofs 36 h 172)
  (textentry indent 0.32 text "Username:" id login_uname keycb ,(lambda () (uiget 'nospacecb)))
  (spacer height 15)
  (textentry indent 0.32 text "Password:" id login_pw password #t keycb ,(lambda () (uiget 'nospacecb)))
  (spacer height 53)
  (box yofs 36 h 146)
  (button h 75 size header indent 0.05 rounded #t text "LOGIN" action
    ,(lambda () 
      (let* ((usernames (dbget 'usernames '()))
             (login-uname (lnhealth-sxrun 'getnotemptystring 'login_uname))
             (login-pw (lnhealth-sxrun 'getnotemptystring 'login_pw))
             (user (assoc login-uname usernames))
             (user-ok (and login-uname login-pw user (fx= (cadr user) (string=?-hash login-pw))))
             (result (begin
               (dbclear 'childid)
               (dbclear 'childid2)
               (dbclear 'first)
               (dbclear 'last)
               (dbclear  'login_uname)
               (dbclear  'login_pw)
               (if user-ok
                 ;; Setup referral region trees, table with keys of district, values of pairs of district table and sub district list. Each district table has keys of sub district, values of facilities in the sub district.
                 (let* ((site (dbget 'site "Mbarara Regional Referral Hospital"))
                        (filename (cond
                                    ((or (string=? site "Mbarara Regional Referral Hospital") (string=? site "Holy Innocents Children's Hospital")) "mbarara_facilities.csv")
                                    ((string=? site "Jinja Regional Referral Hospital") "jinja_facilities.csv")
                                    ((string=? site "Masaka Regional Referral Hospital") "masaka_facilities.csv")))
                        (locations (cdr (csv-read (string-append (uiget 'sandbox "") (system-pathseparator) filename))))
                        (locationstb (make-table init: #f))
                        (locationdistricts '()))
                   (uiset 'login_uname login-uname)
                   (uiset 'site site)
                   (let dloop ((d 0))
                     (if (fx< d (length locations))
                       (let* ((row (list-ref locations d))
                              (district (car row))
                              (districtentry (table-ref locationstb district #f))
                              (districttb (if districtentry (car districtentry) (make-table init: #f)))
                              (sublist (if districtentry (cdr districtentry) '()))
                              (sub (cadr row))
                              (faclist (table-ref districttb sub '()))
                              (fac (caddr row)))
                         ;; Add facility to the list, add sub district to list, add entries into tables, add district to list
                         (table-set! districttb sub (append faclist (list fac)))
                         (table-set! locationstb district (cons districttb (if (list-pos sublist sub) sublist (append sublist (list sub)))))
                         (if (not (list-pos locationdistricts district)) (set! locationdistricts (append locationdistricts (list district))))
                         (dloop (+ d 1)))
                       (begin
                         (uiset 'locationtb locationstb)
                         (uiset 'districts (sort locationdistricts string<?)))))
                   'menu)
                 (if (and (dbget  'admin_uname) login-uname login-pw
                          (string=? (dbget  'admin_uname) login-uname)
                          (fx= (dbget  'admin_pwhash) (string=?-hash login-pw)))
                   'adminmenu
                   `(,"Invalid login" ("OK" #f)))))))
        (uiset  'new #t)
        (uiset  'spo2_manual #f)
        result)))
  (spacer height 140)
;;  (box yofs 195 h 79)
  (label text "Digital Health Innovation Lab")
  (spacer height 5)
  (label text "THE UNIVERSITY OF")
  (label text "BRITISH COLUMBIA")
  (spacer)
;;  (box yofs 16 h 61)
 )

 ;; Menu for deleting all data
 (adminmenu
   "Admin Menu"
   ("Logout" ,(lambda ()
                (dbsave (uiget 'adminpath) (uiget 'cryptokey) (uiget  'database))
                'main))
   #f
   (spacer)
   (label text "Choose the study site for this tablet:")
   (spacer height 15)
   (dropdown text "Hospital" id site entries ,(lambda () (uiget 'sites)))
   (spacer height 100)
   (button h 75 size header indent 0.05 rounded #t size header text "Add User" action ,(lambda () 'adduser))
   (spacer height 100)
   (button h 75 size header indent 0.05 rounded #t size header text "Delete All Data" action
      ,(lambda ()
        (list "Are you sure you wish to delete all records?" (list "Yes"
          (lambda ()
             ;; Clear the register
             (dbclear 'register)
             (dbsave (uiget 'adminpath) (uiget 'cryptokey) (uiget  'database))
             ;; Delete the files
             (let loop ((dirs (directory-files (system-directory))))
               (if (fx> (length dirs) 0)
                 (begin
                   (if (string-suffix-ci? ".db" (car dirs))
                     (delete-file (string-append (system-directory) (system-pathseparator) (car dirs))))
                   (loop (cdr dirs)))))
             'main))
          (list "No" 'adminmenu))))
 )
  
  (adduser
   "Add User"
   ("Back" adminmenu)
   #f
   (spacer height 50)
   (textentry indent 0.4 location ui text "Username:" id new_username keycb ,(lambda () (uiget 'nospacecb)))
   (spacer height 15)
   (textentry indent 0.4 location ui text "Password:" id new_password password #t keycb ,(lambda () (uiget 'nospacecb)))
   (spacer height 15)
   (textentry indent 0.4 location ui text "Confirm Password:" id new_password2 password #t keycb ,(lambda () (uiget 'nospacecb)))
   (spacer)
   (button h 75 size header indent 0.05 rounded #t size header text "Save New User" action
       ,(lambda ()
          (let ((user (uiget 'new_username ""))
                (password (uiget 'new_password ""))
                (password2 (uiget 'new_password2 "")))
            (if (and (fx> (string-length user) 0) (fx> (string-length password) 0) (fx> (string-length password2) 0))
              (if (string=? password password2)
                (let ((usernames (dbget 'usernames '())))
                  (if (assoc user usernames)
                    (list "Error. User already exists." (list "OK" #f))
                    (begin
                      (dbset 'usernames (append usernames (list (list user (string=?-hash password)))))
                      (dbsave (uiget 'adminpath) (uiget 'cryptokey) (uiget  'database))
                      (uiclear 'new_username)
                      (uiclear 'new_password)
                      (uiclear 'new_password2)
                      (list "User successfully saved" (list "OK" #f)))))
                (list "Error. Passwords do not match." (list "OK" #f)))
              (list "Error. Missing fields. Please fill in all fields." (list "OK" #f))))))
   (spacer)
   (label text ,(lambda ()
                  (let ((users (dbget 'usernames '())))
                    (string-append "Current Users:\n"
                                   (if (fx= (length users) 0)
                                     "None yet"
                                     (string-mapconcat users "\n" car))))))
  )

 ;; Main menu
 (menu
   "Start"
   ("Logout" ,(lambda () 'main))
   #f
   (spacer)
   (image file "small_child.png")
   (spacer height 10)
   (button h 75 size header indent 0.05 rounded #t text "Add New Child" action ,(lambda () 'newchild))
   (spacer height 50)
   (image file "load.png")
   (spacer height 10)
   (button h 75 size header indent 0.05 rounded #t text "Load Child File" action ,(lambda () 'load))
   (spacer height 50)
   (image file "upload.png")
   (spacer height 10)
   (button h 75 size header indent 0.05 rounded #t text "Upload" action send)
 )

 ;; New screen
 (newchild
   "New Child"
   ("Back" menu)
   ("Next" ,(lambda ()
              (let ((id (lnhealth-sxrun 'getnotemptystring 'childid))
                    (id2 (lnhealth-sxrun 'getnotemptystring 'childid2))
                    (first (dbget 'first))
                    (last (dbget 'last)))
                (cond
                  ((or (not id) (not id2)) (list "Enter the Study ID twice." (list "OK" #f)))
                  ((not (string=? id id2)) (list "The two Study ID's do not match." (list "OK" #f)))
                  ((not (lnhealth-sxrun 'valid-id id)) (list (string-append id " is not a valid ID.") (list "OK" #f)))
                  (else
                    (let ((db (uiget  'database))
                          (register (dbget 'register '())))
                      (if (member id register)
                        (list "ID already used." (list "OK" #f))
                        (begin
                          (dbclear 'childid)
                          (dbclear 'childid2)
                          (dbclear 'first)
                          (dbclear 'last)
                          (uiset  'admin-database db)
                          (uiset  'database (make-table))
                          (dbset  'childid id)
                          (dbset  'childid2 id2)
                          (spo2spot-folder-set! id)
                          (if first (dbset  'first first))
                          (if last (dbset  'last last))
                          (uiset 'new #t)
                          ;; Set the current date and facility
                          (dbset 'date (seconds->string ##now "%Y-%m-%d"))
                          (dbset 'site (uiget 'site))
                          (dbset 'include_dates #t)
                          (lnhealth-sxrun 'save-child)
                          'demog))))))))
   (spacer height 34)
   (textentry id childid text "Study ID:" indent 0.45 keycb ,(lambda () (uiget 'idcb)))
   (spacer height 20)
   (textentry id childid2 text "Confirm Study ID:" indent 0.45 keycb ,(lambda () (uiget 'idcb)))
   (spacer)
   (box yofs 10 h 157)
   (spacer height 55)
   (textentry indent 0.32 id last name #t text "Surname:")
   (spacer height 20)
   (textentry indent 0.32 id first name #t text "First Name:")
   (spacer)
   (box yofs 10 h 157)
   (spacer height 50)
   (image file "child.png")
 )
  
 ;; Load screen
 (load
   "Load"
   ("Back" menu)
   ("Next" ,(lambda ()
              (let ((sel (dbget 'editname #f)))
                (if sel
                  (let ((filename (string-append sel ".db")))
                    (if (file-exists? (string-append (system-directory) (system-pathseparator) filename))
                      (let ((db (uiget  'database)))
                        (uiset 'new #f)
                        (uiset  'admin-database db)
                        (uiset  'database (dbload filename (uiget 'cryptokey)))
                        (spo2spot-folder-set! sel)
                        ;; Populate SpO2 page with saved values
                        (let ((sp (lnhealth-sxrun 'getnotemptystring 'spo2med))
                              (hr (lnhealth-sxrun 'getnotemptystring 'hrmed))
                              (sptime (dbget 'sptime)))
                          (if (and sp hr)
                            (spo2spot-load hr sp sptime)))
                        'childmenu)
                      (list (string-append "File " filename " missing.") (list "OK" #f))))
                  (list "Select a child by ID" (list "OK" #f))))))
   (spacer height 50)
   (label text "Records")
   (spacer height 10)
   ,(lambda ()
       (let ((register (dbget 'register '())))
          (if (= (length register) 0)
            '(label text "No records to load")
            `(list id editname entries ,register))
       ))
   (spacer)
   (box yofs 10 h ,(lambda () (let ((register (dbget 'register '())))
                                (if (= (length register) 0) 86 (+ 60 (* 48 (length register)))))))
   (spacer height 40)
   (button h 75 size header indent 0.05 rounded #t text "Add New Child" action ,(lambda () 'newchild))
   (spacer height 10)
 )
  
 ;; Child menu
 (childmenu
   "Child"
   ("Exit" ,(lambda ()
              (lnhealth-sxrun 'save-child)
              (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
              (dbclear 'childid)
              (dbclear 'childid2)
              (dbclear 'first)
              (dbclear 'last)
              (spo2spot-reset)
              (stclear "SP_Median")
              (stclear "HR_Median")
              (stclear "SP_Timestamp")
              'menu))
   ("Complete" ,(lambda ()
                  (lnhealth-sxrun 'save-child)
                  (uiset 'completed #f)
                  'send-archive))
   (spacer height 10)
   (label text ,(lambda () (string-append (lnhealth-sxrun 'getnotemptystring 'first) " " (lnhealth-sxrun 'getnotemptystring 'last))))
   (spacer height 44)
   (image file "small_child.png")
   (spacer height 20)
   (button h 75 size header indent 0.05 rounded #t text "Edit Child" action ,(lambda () 'editchild))
   (spacer height 115)
   ,(lambda ()
      (if (dbget 'dischargescore)
        '(label size small text "Post-Discharge Risk of Mortality:")
        '(label size small text "Assessment Incomplete")))
   (spacer height 5)
   ,(lambda ()
      (let ((score (dbget 'dischargescore)))
        (cond
          ((not score)
            '(label size small text "No score yet"))
          ((<= score 4.0)
            '(label size small text "Low"))
          (else
            '(label size small text "High")))))
  (spacer height 20)
  ,(lambda ()
      (let ((score (dbget 'dischargescore)))
        (if (and score (> score 4.0))
          '(image file "referral.png")
          '(spacer height 0))))
  (spacer height 20)
  ,(lambda ()
      (let ((score (dbget 'dischargescore)))
        (if (and score (> score 4.0))
          `(button h 75 size header indent 0.05 rounded #t text "Referral" action ,(lambda () 'referral))
          '(spacer height 0))))
   (spacer)
 )

 ;; Edit child name
 (editchild
   "Edit Child"
   ("Back" ,(lambda ()
              (if (uiget 'new #f)
                (begin
                  (lnhealth-sxrun 'save-child)
                  (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
                  (dbclear 'childid)
                  (dbclear 'childid2)
                  (dbclear 'first)
                  (dbclear 'last)
                  (spo2spot-reset)
                  (stclear "SP_Median")
                  (stclear "HR_Median")
                  (stclear "SP_Timestamp")
                  'menu)
                (begin
                  (lnhealth-sxrun 'save-child)
                  'childmenu))))
   ("Next" ,(lambda ()
              (lnhealth-sxrun 'save-child)
              'demog))
   (spacer height 53)
   (label size small text ,(lambda () (string-append "Study ID: " (dbget 'childid ""))))
   (spacer height 73)
;;   (box left #t yofs 62 h 43)
   (textentry indent 0.32 id last name #t text "Surname:")
   (spacer height 20)
   (textentry indent 0.32 id first name #t text "First Name:")
   (spacer)
   (box yofs 10 h 157)
 )
  
 ;; Demographics screen
 (demog
   "Demographics"
   ("Back" ,(lambda ()
              (lnhealth-sxrun 'save-child)
              'editchild))
   ("Next" ,(lambda ()
              (lnhealth-sxrun 'save-child)
              (if (sane  'lasthosp (lambda (str) #t) "Enter the time since last hospitalization" "")
                ;; Last question answered
                (let* ((sex (dbget 'sex #f))
                       (date (lnhealth-sxrun 'getnotemptystring 'date))
                       (age (dbget 'age #f)))
                   (if (and date (not (sanestring-dob date)))
                     ;; Invalid current date
                     (list "Invalid current date, enter as YYYY-MM-DD" (list "OK" #f))
                     (if (and sex date age)
                       ;; Everything filled in, go to next page
                       'social
                       (let ((message (cond
                                         ((not sex)
                                            (string-append "Missing sex."))
                                         ((not date)
                                            (string-append "Missing current date, cannot calculate child's age."))
                                         ((not age)
                                            (if (and (dbget 'mob #f) (dbget 'yob #f))
                                              (string-append "Invalid child's birth date.")
                                              (string-append "Missing child's birth date."))))))
                         (list message (list "OK" #f))))))
                (list (uiget  'errmsg) (list "OK" #f)))))
   (spacer height 61)
   (label text "Sex")
   (spacer height 5)
   (radiobox id sex left ("Male" "1" #f) right ("Female" "2" #f))
   (spacer height 70)
   (box right #t yofs 60 h 95)
   (label text "Birth Date")
   (spacer height 10)
   (dropdown text "Year of Birth" id yob entries ,(lambda () (uiget 'recent_years)))
   (spacer height 10)
   (dropdown text "Month of Birth" id mob entries ,(lambda () (uiget 'months)))
   (spacer height 10)
   (label align center text ,(lambda ()
                             (string-append "Calculated Age: "
                             ;; Calculate years between dob and current date
                             (let ((year (dbget 'yob #f))
                                   (month (dbget 'mob #f)))
                               (if (and year month)
                                 (let* ((months (uiget 'months))
                                        (monthnum (+ (list-pos months month) 1))
                                        (monthstr (string-append (if (fx< monthnum 10) "0" "") (number->string monthnum))) 
                                        (dob (string->seconds (string-append year monthstr "15") "%Y%m%d"))
                                        (current (with-exception-catcher (lambda (e) #f) (lambda () (string->seconds (dbget 'date) "%Y-%m-%d")))))
                                   (if current
                                     (let ((age (/ (- current dob) 31557600)))
                                       (if (< age 0.3)
                                         (begin
                                           (dbset 'age #f)
                                           "Invalid - Too Young")
                                         (begin
                                           (dbset 'age age)
                                           (lnhealth-sxrun 'format-age age))))
                                     (begin
                                       (dbset 'age #f)
                                       "Invalid - Fix Current Date")))
                                 (begin
                                   (dbset 'age #f)
                                   ""))))))
   (spacer height 75)
   (box left #t yofs 60 h ,(lambda ()
                             (let ((dh1 (if (uiget "yob:expanded") 336 0))
                                   (dh2 (if (uiget "mob:expanded") 576 0)))
                               (+ 193 dh1 dh2))))
   (label text "Last hospitalized...")
   (spacer height 10)
   (dropdown "Choose One" id lasthosp entries ,(lambda () (uiget 'hosp_options)))
   (spacer height 40)
   (box right #t yofs 25 h ,(lambda () (if (uiget "lasthosp:expanded") 340 105)))
 )
  
 (social
   "Social Data"
   ("Back" ,(lambda ()
              (lnhealth-sxrun 'save-child)
              'demog))
   ("Next" ,(lambda ()
              (if (and (sane 'watersource (lambda (str) #t) "Enter the water source" "")
                       (sane 'waterpure (lambda (str) #t) "Enter whether you boil, filter or disinfect your water" "")
                       (sane 'bednet (lambda (str) #t) "Enter the mosquito net" "")
                       (sane 'momedu (lambda (str) #t) "Enter the education level" "")
                       (sane 'traveldist (lambda (str) #t) "Enter the travel time" ""))
                (begin
                  (lnhealth-sxrun 'save-child)
                  'anthro)
                (list (uiget  'errmsg) (list "OK" #f)))))
   (spacer)
   (label text "Primary water source for drinking water")
   (spacer height 10)
   (dropdown "Choose One" id watersource entries ,(lambda () (uiget 'water_options)))
   (spacer)
   (label text "Do you boil, filter (good sand/ceramic) or disinfect (using bleach/waterguard) all drinking water?")
   (spacer height 10)
   (radiobox id waterpure left ("Yes" "1" #f) right ("No" "0" #f))
   (spacer)
   (label text "Does your child sleep under\na mosquito net?")
   (spacer height 10)
   (dropdown "Choose One" id bednet entries ,(lambda () (uiget 'net_options)))
   (spacer)
   (label text "What is the education level\nof the child's mother?")
   (spacer height 10)
   (dropdown "Choose One" id momedu entries ,(lambda () (uiget 'momedu_options)))
   (spacer)
   (label text "How long did it take you to\ntravel to the hospital?")
   (spacer height 10)
   (dropdown "Choose One" id traveldist entries ,(lambda () (uiget 'travel_options)))
 )

 ;; Anthropometric screen
 (anthro
   "Anthropometric Data"
   ("Back" ,(lambda ()
              (lnhealth-sxrun 'save-child)
              'social))
   ("Next" ,(lambda ()
              (lnhealth-sxrun 'save-child)
              (let* ((z (dbget 'zscore #f))
                     (weight (lnhealth-sxrun 'getnotemptystring 'weight))
                     (muac (lnhealth-sxrun 'getnotemptystring 'muac))
                     (temp (lnhealth-sxrun 'getnotemptystring 'temp))
                     (returnvalue #f)
                     (completeproc (lambda ()
                                      (if (and weight (not (sanestring-weight-kg weight)))
                                        ;; Invalid weight
                                        (list "Invalid weight. Please correct it" (list "OK" #f))
                                        (if (and (not z) (not muac))
                                          ;: No MUAC or WAZ, cannot continue
                                          (list (if (not weight)
                                                  "Please enter either weight or MUAC. Without these the risk scores cannot be calculated."
                                                  "Weight for age score cannot be calculated without age. Please enter MUAC.")
                                                (list "OK" #f))
                                          (if (and z muac temp)
                                            ;; All complete
                                            (begin
                                              (uiset 'origgui lnhealth:gui)
                                              (set! lnhealth:gui (list lnhealth:gui spo2spot:gui))
                                              (glgui-widget-set! spo2spot:gui spo2spot:start 'hidden #f)
                                              'pulseox)
                                            ;; Missing something
                                            (list
                                               (cond
                                                 ((not weight) "Missing weight.")
                                                 ((not z) "Invalid weight for the given age, weight for age score cannot be calculated.")
                                                 ((not muac) "Missing MUAC.")
                                                 (else "Missing temperature."))
                                               (list "OK" #f))))))))
                  ;; Check for out of range values
                  (if muac
                    (let ((muacn (string->number muac))
                          (proc2 completeproc))
                      (if (< muacn 50)
                        (set! returnvalue (list (string-append "MUAC is " muac " mm. A value below 55 mm is not valid.") (list "OK" #f)))
                        (if (or (< muacn 100) (> muacn 160))
                          (set! completeproc
                            (lambda ()
                              (list (string-append "MUAC outside acceptable range of\n100 - 160 mm. Are you sure MUAC is " muac " mm.") (list "Yes" proc2) (list "No" #f))))))))
                
                  (if (not returnvalue)
                    (if (and z (or (< z -4.0) (> z 3.0)))
                      (let ((gender (if (string=? (dbget 'sex) "1") "Male" "Female"))
                            (age (lnhealth-sxrun 'format-age (dbget 'age))))
                        (set! returnvalue (list (string-append "The weight for age score is outside the acceptable range of -4 to +3. "
                                                               "Please confirm child is a " age " old " gender " with weight " weight " kg.")
                                                (list "Yes" completeproc) (list "No" #f))))))
                 
                 ;; Return return value or run complete procedure
                 (if returnvalue returnvalue (completeproc)))))
                
   (spacer height 32)
   (textentry indent 0.7 text "Weight:" id weight keypad numfloat default "kg" units "kg")
   (spacer height 31)
   (textentry indent 0.7 text "Mid-upper arm circumference:" id muac keypad numint default "mm" units "mm")
   (spacer height 31)
   (textentry indent 0.7 text "Temperature:" id temp keypad numfloat default "C" units "C")
   (spacer height 49)
   (label size small text "Calculated")
   (label size small text "weight for age z-score")
   (spacer height 10)
   (label size big text ,(lambda () (let ((weight (dbget 'weight #f))
                                          (age (dbget 'age #f))
                                          (gender (dbget 'sex #f)))
                                      (if (and (string? weight) (fx> (string-length weight) 0) age gender)
                                        (let* ((w (string->number weight))
                                               (boy? (string=? gender "1"))
                                               (z (lnhealth-sxrun 'z-score age w boy?)))
                                          (dbset 'zscore z)
                                          (lnhealth-sxrun 'float->stringz z 1))
                                        (begin
                                          (dbset 'zscore #f)
                                          " ")))))
   (spacer)
   (box yofs 18 h 130)
 )
 
  ;; Oxygen saturation from another device
  (spo2
   " Oxygen Saturation"
   ("Back" ,(lambda ()
              (uiset 'origgui lnhealth:gui)
              (set! lnhealth:gui (list lnhealth:gui spo2spot:gui))
              (glgui-widget-set! spo2spot:gui spo2spot:start 'hidden #f)
              'pulseox))
   ("Next" ,(lambda ()
              (lnhealth-sxrun 'save-child)
              (uiset 'frompulseox #f)
              (let* ((sp0 (lnhealth-sxrun 'getnotemptystring 'spo2med))
                     (sp (if sp0 sp0 (lnhealth-sxrun 'getnotemptystring 'spo2manual)))
                     (muac (lnhealth-sxrun 'getnotemptystring 'muac)))
                (if sp
                  (if (> (string->number sp) 100)
                    (list (string-append "SpO2 is " sp ". SpO2 must be less than of equal to 100.") (list "OK" #f))
                    'clinical)
                  (list "Missing SpO2. Please measure it to proceed." (list "OK" #f))))))
   (spacer height 70)
   (textentry indent 0.7 text "SpO2 from another device:" id spo2manual keypad numint default "%" units "%")
   (spacer)
 )
   
  
  ;; Pulse oximeter spot check page
  (pulseox
   " Oxygen Saturation"
   ("Back" ,(lambda ()
              (if (uiget 'invalidspo2)
                (begin
                  (stclear "SP_Median")
                  (uiset 'invalidspo2 #f)))
              (if (stget "CaseID" #f)
                (begin
                  (set! lnhealth:gui (uiget 'origgui lnhealth:gui))
                  (list "Stop current SpO2 recording?" (list "Yes" (lambda ()
                                                                     (spo2spot-stop-recording)
                                                                     (uiset 'invalidspo2 #t)
                                                                     (lnhealth-sxrun 'save-child)
                                                                     'anthro))
                                                       (list "No" (lambda ()
                                                                    (set! lnhealth:gui (list lnhealth:gui spo2spot:gui))
                                                                    #f))))
                (let ((sp (stget "SP_Median" ""))
                      (hr (stget "HR_Median" ""))
                      (sptime (stget "SP_Timestamp" #f))
                      (sqi (stget "SP_SQI" ""))
                      (filepath (stget "SP_Data" #f)))
                  (if (fx> (string-length sp) 0) (dbset 'spo2med sp))
                  (if (fx> (string-length hr) 0) (dbset 'hrmed hr))
                  (if sptime (dbset 'sptime sptime))
                  (if (fx> (string-length sqi) 0) (dbset 'sqi sqi))
                  (if filepath (dbset 'spo2files filepath))
                  (set! lnhealth:gui (uiget 'origgui lnhealth:gui))
                  (lnhealth-sxrun 'save-child)
                  'anthro))))
   ("Next" ,(lambda ()
              (if (uiget 'invalidspo2)
                (begin
                  (stclear "SP_Median")
                  (uiset 'invalidspo2 #f)))
              (let ((exitproc (lambda ()
                                (lnhealth-sxrun 'save-child)
                                (uiset 'frompulseox #t)
                                       ;; SpO2 just recorded
                                (let* ((sp0 (stget "SP_Median" #f))
                                       ;; SpO2 possibly previous recorded
                                       (sp1 (if (string? sp0) sp0 (lnhealth-sxrun 'getnotemptystring 'spo2med)))
                                       ;; SpO2 possibly from a manual entry
                                       (sp (if (string? sp1) sp1 (lnhealth-sxrun 'getnotemptystring 'spo2manual)))
                                       (muac (lnhealth-sxrun 'getnotemptystring 'muac)))
                                  (if sp
                                    (begin
                                      (if (and sp0 (fx> (string-length sp0) 0))
                                        ;; Just recorded SpO2
                                        (let ((hr (stget "HR_Median" ""))
                                              (sptime (stget "SP_Timestamp" #f))
                                              (sqi (stget "SP_SQI" ""))
                                              (filepath (stget "SP_Data" #f)))
                                          (dbset 'spo2med sp0)
                                          (if (fx> (string-length hr) 0) (dbset 'hrmed hr))
                                          (if sptime (dbset 'sptime sptime))
                                          (if (fx> (string-length sqi) 0) (dbset 'sqi sqi))
                                          (if filepath (dbset 'spo2files filepath))))
                                      (set! lnhealth:gui (uiget 'origgui lnhealth:gui))
                                      'clinical)
                                    (begin
                                      (set! lnhealth:gui (uiget 'origgui lnhealth:gui))
                                      (list "Missing SpO2. Please measure it to proceed." (list "OK" (lambda ()
                                                                                                       (set! lnhealth:gui (list lnhealth:gui spo2spot:gui))
                                                                                                       #f)))))))))
                (if (stget "CaseID" #f)
                  ;; In the middle of a recording, ask them if they wish to stop it
                  (begin
                    (set! lnhealth:gui (uiget 'origgui lnhealth:gui))
                    (list "Stop current SpO2 recording?" (list "Yes" (lambda ()
                                                                       (spo2spot-stop-recording)
                                                                       (uiset 'invalidspo2 #t)
                                                                       (exitproc)))
                                                         (list "No" (lambda ()
                                                                      (set! lnhealth:gui (list lnhealth:gui spo2spot:gui))
                                                                      #f))))
                  ;; Not in the middle of a recording, run exit procedure
                  (exitproc)))))
   (spacer height 600)
   ,(lambda ()
       (let ((id (stget "CaseID" #f)))
          (if (or id (lnhealth-sxrun 'getnotemptystring 'spo2med) (stget "SP_Median" #f))
            ;; If tablet based SpO2 being done or is already done, don't allow manual
            '(spacer height 0)
            `(button height 30 rounded #t text "SpO2 from another device" action ,(lambda ()
                (if (uiget 'invalidspo2)
                  (begin
                     (stclear "SP_Median")
                     (uiset 'invalidspo2 #f)))
                (let ((sp (stget "SP_Median" #f)))
                  (if (number? sp) (dbset 'spo2med (number->string sp)))
                  (set! lnhealth:gui (uiget 'origgui lnhealth:gui))
                  (lnhealth-sxrun 'save-child)
                  'spo2))))))
 )
 
 ;; Clinical data screen
 (clinical
   "Clinical Data"
   ("Back" ,(lambda ()
              (if (uiget 'invalidspo2)
                (begin
                  (stclear "SP_Median")
                  (uiset 'invalidspo2 #f)))
              (lnhealth-sxrun 'save-child)
              (if (uiget 'frompulseox)
                (begin
                  (uiset 'origgui lnhealth:gui)
                  (set! lnhealth:gui (list lnhealth:gui spo2spot:gui))
                  (glgui-widget-set! spo2spot:gui spo2spot:start 'hidden #f)
                  'pulseox)
                'spo2)))
   ("Next" ,(lambda ()
              (if (uiget 'invalidspo2)
                (begin
                  (stclear "SP_Median")
                  (uiset 'invalidspo2 #f)))
              (lnhealth-sxrun 'save-child)
              (let ((bcs (dbget 'comascore #f))
                    (momhiv (dbget 'momhiv #f))
                    (hiv (dbget 'hiv #f)))
                (if bcs
                  (if (and hiv momhiv)
                    (begin
                      (lnhealth-sxrun 'save-child)
                      (let ((dscore (lnhealth-sxrun 'calc-discharge-score)))
                        (dbset 'dischargescore dscore))
                      'risk)
                    (list "Missing HIV Status. Please enter both the maternal and child HIV status." (list "OK" #f)))
                  (list "Missing BCS. Without this score the risk scores cannot be calculated." (list "OK" #f))))))
   (spacer height 30)
   (label size small text "Blantyre coma scale")
   (spacer)
   (label align left text "Eye Movement")
   (spacer height 10)
   (dropdown id eye entries ,(lambda () (uiget 'eye_options)))
   (spacer)
   (label align left text "Best motor response")
   (spacer height 10)
   (dropdown id motor entries ,(lambda () (uiget 'motor_options)))
   (spacer)
   (label align left text "Best verbal response")
   (spacer height 10)
   (dropdown id verbal entries ,(lambda () (uiget 'verbal_options)))
   (spacer)
   (label size small text "Calculated Blantyre coma score")
   (spacer height 10)
   (label size big text ,(lambda () (let ((e (dbget 'eye #f))
                                          (eo (uiget 'eye_options #f))
                                          (m (dbget 'motor #f))
                                          (mo (uiget 'motor_options #f))
                                          (v (dbget 'verbal #f))
                                          (vo (uiget 'verbal_options #f)))
                                        (if (and e eo m mo v vo)
                                          ;; Add up questions to get scale value
                                          (let ((num (fx+ (- (length (member e eo)) 1)
                                                          (- (length (member m mo)) 1)
                                                          (- (length (member v vo)) 1))))
                                            (dbset 'comascore num)
                                            (number->string num))
                                          (begin
                                            (dbset 'comascore #f)
                                            "")))))
   (spacer height 31)
   (box left #t yofs 23 h ,(lambda () (+ 441
                                         (if (uiget "eye:expanded") 96 0)
                                         (if (uiget "motor:expanded") 144 0)
                                         (if (uiget "verbal:expanded") 144 0)
                                         (if (dbget 'comascore) 40 0))))
   (label text "HIV status")
   (spacer height 10)
   (dropdown label "Maternal" id momhiv entries ("Positive" "Negative" "Unknown"))
   (spacer height 10)
   (dropdown label "Child" id hiv entries ("Positive" "Negative"))
   (spacer)
   (box right #t yofs 16 h ,(lambda () (+ 160
                                         (if (uiget "momhiv:expanded") 144 0)
                                         (if (uiget "hiv:expanded") 144 0))))
 )
  
  ;; Risk screen
 (risk
   "Risk"
   ("Back" ,(lambda ()
              (lnhealth-sxrun 'save-child)
              'clinical))
   ("Restart" ,(lambda ()
                     (lnhealth-sxrun 'save-child)
                     (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
                     (dbclear 'childid)
                     (dbclear 'childid2)
                     (dbclear 'first)
                     (dbclear 'last)
                     (spo2spot-reset)
                     (stclear "SP_Median")
                     (stclear "HR_Median")
                     (stclear "SP_Timestamp")
                     'menu))
   (spacer height 140)
   (label size small text "Post-Discharge Risk of Mortality")
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 4.0) "Low" "High")
                                         "Not Calculated"))))
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 4.0) "< 1.5 %" "> 10 %")
                                         ""))))
   (spacer height 22)
   (help action help-post-discharge)
   (spacer height 80)
   (box yofs 65 h 244 border ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                           (if score
                                             (if (<= score 4.0) Green Red)
                                             #f))))
 )
  
  ;; Help page for post-discharge mortality
  (help-post-discharge
   "Post-Discharge Risk"
   ("Back" risk)
   #f
   (spacer height 40)
   (label align left text ,(lambda () (string-append "Risk has been dichotomized into low and high based on a risk cut-off of approximately 4.0%. "
                                          "The percent shown represents the average risk of mortality in the population in which the model was derived, based on the cut-off.\n\n"
                                          "The risk bar represents the actual calculated risk, scaled to represent the 1st and 99th percentile of risk on the extreme sides, "
                                          "the risk cut-off (4.0%) at the middle, and the median population risk in the orange-yellow zone to the right of the middle.")))
   (spacer height 70)
   (label size small text "Post-Discharge Risk of Mortality")
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 4.0) "Low" "High")
                                         "Not Calculated"))))
   (spacer)
   (label size big text ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                       (if score
                                         (if (<= score 4.0) "< 1.5 %" "> 10 %")
                                         ""))))
   (spacer)
   (scale thresholds ,(lambda () (uiget 'post_thresholds)) value ,(lambda () (let ((score (dbget 'dischargescore #f)))
                                                                                (if score (- score) #f))))
   (spacer height 20)
   (box h 625)
 )

 ;; Referral info collection
 (referral
   "Referral"
   ("Back" ,(lambda ()
              ;; Check that phone numbers match
              (let ((phone (lnhealth-sxrun 'getnotemptystring 'phone))
                    (phone2 (lnhealth-sxrun 'getnotemptystring 'phone2)))
                (cond
                  ((and phone phone2 (not (string=? phone phone2)))
                     (list "Phone numbers do not match." (list "OK" #f)))
                  ((and phone phone2 (not (fx= (string-length phone) 10)))
                     (list "Phone number must be 10 digits starting with a 0." (list "OK" #f)))
                  ((or (and phone (not phone2)) (and phone2 (not phone)))
                     (list "The phone number must be entered twice." (list "OK" #f)))
                  (else
                    (dbset 'disnurse (uiget 'login_uname ""))
                    (dbset 'disdate (seconds->string ##now "%Y-%m-%d"))
                    (lnhealth-sxrun 'save-child)
                    'childmenu)))))
   ("Print" ,(lambda () (lnhealth-sxrun 'goto-printing)))
   (spacer)
   (checkbox id sms_consent indent 0.1 text "Consent to SMS referral reminders?")
   (spacer height 10)
   ,(lambda ()
      (if (dbget 'sms_consent)
        (let ((ph (dbget 'phone "")))
          (if (fx= (string-length ph) 0)
            (dbset 'phone "0"))
          `(textentry id phone indent 0.4 text "Phone:"  keypad numint keycb ,(lambda () (uiget 'phonecb))))
        (begin
          (dbclear 'phone)
          '(spacer height 0))))
   (spacer height 10)
  ,(lambda ()
      (if (dbget 'sms_consent)
        (let ((ph2 (dbget 'phone2 "")))
          (if (fx= (string-length ph2) 0)
            (dbset 'phone2 "0"))
          `(textentry id phone2 indent 0.4 text "Confirm Phone:"  keypad numint keycb ,(lambda () (uiget 'phonecb))))
        (begin
          (dbclear 'phone2)
          '(spacer height 0))))
   (spacer)
   (label text "Choose the preferred referral facility:")
   (spacer height 10)
   (dropdown id district text "Choose District" entries ,(lambda () (uiget 'districts)))
   (spacer height 10)
   ,(lambda ()
     (if (dbget 'district)
       `(dropdown id sub text "Choose Health Sub District" entries ,(lambda ()
                                                                      (let* ((locationtb (uiget 'locationtb))
                                                                             (districtentry (table-ref locationtb (dbget 'district) #f))
                                                                             (sublist (if districtentry (cdr districtentry) '())))
                                                                        (sort sublist string<?))))
       '(spacer height 0)))
   (spacer height 10)
   ,(lambda ()
     (if (and (dbget 'sub) (dbget 'district))
       `(dropdown id facility text "Choose Health Facility" entries ,(lambda ()
                                                                      (let* ((locationtb (uiget 'locationtb))
                                                                             (districtentry (table-ref locationtb (dbget 'district) #f))
                                                                             (districttb (if districtentry (car districtentry) (make-table init: #f)))
                                                                             (faclist (table-ref districttb (dbget 'sub) '())))
                                                                        (append (sort faclist string<?) (list "Other")))))
       '(spacer height 0)))
   (spacer height 10)
   ,(lambda ()
     (if (and (dbget 'facility) (string=? (dbget 'facility) "Other"))
       `(textentry id custom_facility text "Other:")
       '(spacer height 0)))
   (spacer)
   (label text ,(lambda () (string-append "User: " (uiget 'login_uname ""))))
   (spacer)
   (button h 75 size header indent 0.05 rounded #t text "REFERRAL PRINTING" action ,(lambda () (lnhealth-sxrun 'goto-printing)))
 )

  ;; Referral summary page
 (printing
  "Referral"
  ("Back" referral)
  ("Done" childmenu)
  (spacer)
  (label align left indent 0.05 text ,(lambda () (string-append "Patient Name: " (dbget 'first "") " " (dbget 'last ""))))
  (spacer height 4)
  (label align left indent 0.05 text ,(lambda () (string-append "DOB: " (dbget 'mob "    ") ", " (dbget 'yob "    ") "        Sex: " (if (string=? (dbget 'sex "") "1") "Male" (if (string=? (dbget 'sex "") "2") "Female" "")))))
  (spacer height 4)
  (label align left indent 0.05 text ,(lambda ()
                            (let* ((date0 (dbget 'date ""))
                                   (date (if (fx> (string-length date0) 0) (seconds->string (string->seconds date0 "%Y-%m-%d") "%B %e, %Y") "")))
                              (string-append "Admission Date: " date))))
  (spacer height 4)
  (label align left indent 0.05 text "Discharging Hospital:")
  (spacer height 4)
  (label align left indent 0.05 text ,(lambda ()
                            (let ((site (dbget 'site "")))
                                (if (string-suffix? "Hospital" site) (substring site 0 (- (string-length site) 9)) site))))
  (spacer height 4)
  (label align left indent 0.05 text ,(lambda () (string-append "Discharge Date: " (seconds->string (current-time-seconds) "%B %e, %Y"))))
  (spacer height 4)
  (label align left indent 0.05 text "Post-discharge Vulnerability: High")
  (spacer height 4)
  (label align left indent 0.05 text ,(lambda () (string-append "Referral Facility: " (let ((facility (lnhealth-sxrun 'getnotemptystring 'facility)))
                                                                                   (if facility
                                                                                     (if (string=? facility "Other")
                                                                                       (dbget 'custom_facility "")
                                                                                       facility))))))
  (spacer)
  (label align left indent 0.05 text "If discharged today")
  (spacer height 4)
  (label align left indent 0.05 text ,(lambda () (seconds->string (current-time-seconds) "%A, %B %e, %Y")))
  (spacer height 4)
  (label align left indent 0.05 text "referral dates are:")
  (spacer height 10)
  (label align left indent 0.05 text ,(lambda () (string-append "Visit #1: " (seconds->string (+ (current-time-seconds) 172800) "%A, %B %e, %Y"))))
  (spacer height 4)
  (label align left indent 0.05 text ,(lambda () (string-append "Visit #2: " (seconds->string (+ (current-time-seconds) 604800) "%A, %B %e, %Y"))))
  (spacer height 4)
  (label align left indent 0.05 text ,(lambda () (string-append "Visit #3: " (seconds->string (+ (current-time-seconds) 1209600) "%A, %B %e, %Y"))))
  (spacer height 60)
  (checkbox id include_dates text "Include referral dates")
  (spacer height 10)
  (button h 75 size header indent 0.05 rounded #t text "COPY INFO FOR PRINTING" action
    ,(lambda ()
       (let* ((adate0 (dbget 'date ""))
              (adate (if (fx> (string-length adate0) 0) (seconds->string (string->seconds adate0 "%Y-%m-%d") "%B %e, %Y") ""))
              (site0 (dbget 'site ""))
              (site (if (string-suffix? "Hospital" site0) (substring site0 0 (- (string-length site0) 9)) site0)))
         (clipboard-copy (string-append "Patient Name: " (dbget 'first "") " " (dbget 'last "") "\n"
                                        "DOB: " (dbget 'mob "    ") ", " (dbget 'yob "    ") "        Sex: " (if (string=? (dbget 'sex "") "1") "Male" (if (string=? (dbget 'sex "") "2") "Female" "")) "\n"
                                        "Admission Date: " adate "\n"
                                        "Discharging Hospital: " site "\n"
                                        "Discharge Date: " (seconds->string (current-time-seconds) "%B %e, %Y") "\n"
                                        "Post-discharge Vulnerability: High\n"
                                        "Referral Facility: " (let ((facility (lnhealth-sxrun 'getnotemptystring 'facility)))
                                                                        (if facility
                                                                          (if (string=? facility "Other")
                                                                            (dbget 'custom_facility "")
                                                                            facility)))
                                        (if (dbget 'include_dates)
                                          (string-append "\nDates for scheduled follow-up:\n"
                                                         "Visit #1: " (seconds->string (+ (current-time-seconds) 172800) "%A, %B %e, %Y") "\n"
                                                         "Visit #2: " (seconds->string (+ (current-time-seconds) 604800) "%A, %B %e, %Y") "\n"
                                                         "Visit #3: " (seconds->string (+ (current-time-seconds) 1209600) "%A, %B %e, %Y") "\n")
                                          "")))
         (list "Referral info copied. Paste into the printer app." (list "OK" #f)))))
 )

 (send
   "Upload"
   ("Back" ,(lambda ()
              (uiset 'uploading #f)
              (uiset 'progress 0.)
              'menu))
   #f
    (spacer height 100)
    (button h 75 size header indent 0.05 rounded #t text "Upload" action
      ,(lambda ()
         (upload-all-data)
         'send))
    (spacer)
    ,(lambda ()
        (let ((up (uiget  'uploading #f)))
          (cond
             ((not up)
               '(spacer height 0))
             ((fx= up 1)
               '(label text "Uploading..."))
             ((fx= up 2)
               '(label text "Upload Complete"))
             ((fx= up 3)
               '(label text "Upload Failed - Check Wi-Fi"))
             ((fx= up 0)
               '(label text "No Data Stored")))))
    (spacer)
    ,(lambda ()
        (let ((up (uiget  'uploading #f)))
          (if (and up (fx= up 1))
            `(label text ,(lambda () (uiget 'pmessage)))
            '(spacer height 0))))
    (spacer height 10)
    ,(lambda ()
        (let ((up (uiget  'uploading #f)))
          (if (and up (fx= up 1))
            `(progress value ,(lambda () (uiget 'progress)))
            '(spacer height 0))))
  )

  (send-archive
    "Complete"
    ("Cancel" ,(lambda ()
                (uiset 'uploading #f)
                (uiset 'progress 0.)
                'childmenu))
    #f
    (spacer height 100)
    ,(lambda ()
       (let ((up (uiget  'uploading 0)))
         (if (and (uiget 'completed) (fx= up 2))
           '(spacer height 75)
           `(button h 75 size header indent 0.05 rounded #t text " Final Upload" action
             ,(lambda ()
               (upload-data (list (dbget 'childid)) #t)
               'send-archive)))))
    (spacer)
    ,(lambda ()
        (let ((up (uiget  'uploading #f)))
          (cond
             ((not up)
               '(spacer height 0))
             ((fx= up 1)
               '(label text "Uploading..."))
             ((fx= up 2)
               '(label text "Upload Complete"))
             ((fx= up 3)
               '(label text "Upload Failed - Check Wi-Fi"))
             ((fx= up 0)
               '(label text "No Data Stored")))))
    (spacer)
    ,(lambda ()
        (let ((up (uiget  'uploading #f)))
          (if (and up (fx= up 1))
            `(label text ,(lambda () (uiget 'pmessage)))
            '(spacer height 0))))
    (spacer height 10)
    ,(lambda ()
        (let ((up (uiget  'uploading #f)))
          (if (and up (fx= up 1))
            `(progress value ,(lambda () (uiget 'progress)))
            '(spacer height 0))))
    ,(lambda ()
        (let ((up (uiget  'uploading 0)))
          (if (and (uiget 'completed) (fx= up 2))
           `(button h 75 size header indent 0.05 rounded #t text "Archive" action
             ,(lambda ()
                (let ((id (dbget 'childid)))
                  (lnhealth-sxrun 'save-child)
                  (uiset  'database (dbload (uiget 'adminpath) (uiget 'cryptokey)))
                  (dbset 'register (list-delete-item (dbget 'register '()) id))
                  (dbclear 'childid)
                  (dbclear 'childid2)
                  (dbclear 'first)
                  (dbclear 'last)
                  (dbsave (uiget 'adminpath) (uiget 'cryptokey) (uiget 'database))
                  (spo2spot-reset)
                  (stclear "SP_Median")
                  (stclear "HR_Median")
                  (stclear "SP_Timestamp")
                  'menu)))
           '(spacer height 0))))
  )
)
  
;; eof
